open HolKernel Parse boolLib bossLib;
open helperTactics;
open bdTheory;
open txInvariantMemoryReadsTheory;
open tx_bd_queueTheory;

val _ = new_theory "tx_invariant_memory_reads_lemmas";

val TX_INVARIANT_MEMORY_READABLE_DEPENDS_ONLY_ON_BD_AP_lemma = store_thm (
  "TX_INVARIANT_MEMORY_READABLE_DEPENDS_ONLY_ON_BD_AP_lemma",
  ``!READABLE.
    BD_AP_PROPERTY_DEPENDS_ONLY_ON_BD_AP TX_INVARIANT_MEMORY_READABLE_BD READABLE``,
  GEN_TAC THEN
  REWRITE_TAC [BD_AP_PROPERTY_DEPENDS_ONLY_ON_BD_AP_def] THEN
  REPEAT GEN_TAC THEN
  DISCH_TAC THEN
  REWRITE_TAC [TX_INVARIANT_MEMORY_READABLE_BD_def] THEN
  ASSUME_TAC (UNDISCH (SPEC_ALL BD_EQ_IMP_TX_BD_EQ_lemma)) THEN
  ASM_REWRITE_TAC []);

val TX_BD_PA_MEMBER_READABLE_BD_QUEUE_IMP_BD_PA_ADDRESS_READABLE_lemma = store_thm (
  "TX_BD_PA_MEMBER_READABLE_BD_QUEUE_IMP_BD_PA_ADDRESS_READABLE_lemma",
  ``!q bd_pa CPPI_RAM READABLE.
    MEM bd_pa q /\
    TX_INVARIANT_MEMORY_READABLE_BD_QUEUE q READABLE CPPI_RAM
    ==>
    TX_INVARIANT_MEMORY_READABLE_BD bd_pa CPPI_RAM READABLE``,
  REPEAT GEN_TAC THEN
  REWRITE_TAC [TX_INVARIANT_MEMORY_READABLE_BD_QUEUE_def, listTheory.EVERY_MEM] THEN
  BETA_TAC THEN
  DISCH_TAC THEN
  SPLIT_ASM_TAC THEN
  PAT_ASSUM ``!x.P`` (fn thm => ASSUME_TAC (UNDISCH (SPEC ``bd_pa : 32 word`` thm))) THEN
  ASM_REWRITE_TAC []);

val TX_INVARIANT_MEMORY_READABLE_BD_QUEUE_PRESERVED_SOP_BD_PA_CPPI_RAM_lemma = store_thm (
  "TX_INVARIANT_MEMORY_READABLE_BD_QUEUE_PRESERVED_SOP_BD_PA_CPPI_RAM_lemma",
  ``!nic nic' READABLE.
    (nic'.tx.sop_bd_pa = nic.tx.sop_bd_pa) /\
    (nic'.regs.CPPI_RAM = nic.regs.CPPI_RAM) /\
    TX_INVARIANT_MEMORY_READABLE_BD_QUEUE (tx_bd_queue nic) READABLE nic.regs.CPPI_RAM
    ==>
    TX_INVARIANT_MEMORY_READABLE_BD_QUEUE (tx_bd_queue nic') READABLE nic'.regs.CPPI_RAM``,
  REPEAT GEN_TAC THEN
  DISCH_TAC THEN
  SPLIT_ASM_TAC THEN
  ASSUME_TAC (CONJ_ANT_TO_HYP (SPEC_ALL EQ_SOP_BD_PA_AND_CPPI_RAM_AND_TX_INVARIANT_BD_QUEUE_FINITE_IMP_EQ_BD_QUEUES_lemma)) THEN
  ASM_REWRITE_TAC []);

val _ = export_theory();

