open HolKernel Parse boolLib bossLib;
open helperTactics;
open txInvariantTheory;
open txInvariantWellDefinedTheory;
open tx_bd_queueTheory;
open tx_invariant_well_defined_lemmasTheory;

val _ = new_theory "tx_invariant_lemmas";

val TX_INVARIANT_IMP_TX_BD_QUEUE_lemma = store_thm (
  "TX_INVARIANT_IMP_TX_BD_QUEUE_lemma",
  ``!nic READABLE.
    TX_STATE_AUTONOMOUS_TRANSITION_ENABLE_OR_PROCESS_MEMORY_READ_REPLY nic /\
    TX_INVARIANT nic READABLE
    ==>
    BD_QUEUE (tx_bd_queue nic) nic.tx.sop_bd_pa nic.regs.CPPI_RAM``,
  REPEAT GEN_TAC THEN
  REWRITE_TAC [TX_INVARIANT_def] THEN
  REWRITE_TAC [TX_INVARIANT_MEMORY_def] THEN
  REWRITE_TAC [TX_INVARIANT_WELL_DEFINED_def] THEN
  REWRITE_TAC [TX_INVARIANT_BD_QUEUE_FINITE_def] THEN
  DISCH_TAC THEN
  SPLIT_ASM_TAC THEN
  PAT_ASSUM ``P ==> Q`` (fn thm => ASSUME_TAC (UNDISCH thm)) THEN
  SPLIT_ASM_TAC THEN
  PAT_ASSUM ``?x.P`` (fn thm => CHOOSE_TAC thm) THEN
  ASSUME_TAC (UNDISCH (SPEC_ALL TX_BD_QUEUE_IMP_TX_BD_QUEUE_tx_bd_queue_lemma)) THEN
  ASM_REWRITE_TAC []);

val TX_INVARIANT_IMP_TX_BD_QUEUE_IN_CPPI_RAM_lemma = store_thm (
  "TX_INVARIANT_IMP_TX_BD_QUEUE_IN_CPPI_RAM_lemma",
  ``!nic READABLE.
    TX_STATE_AUTONOMOUS_TRANSITION_ENABLE_OR_PROCESS_MEMORY_READ_REPLY nic /\
    TX_INVARIANT nic READABLE
    ==>
    BDs_IN_CPPI_RAM (tx_bd_queue nic)``,
  REPEAT GEN_TAC THEN
  REWRITE_TAC [TX_INVARIANT_def] THEN
  REWRITE_TAC [TX_INVARIANT_MEMORY_def] THEN
  REWRITE_TAC [TX_INVARIANT_WELL_DEFINED_def] THEN
  DISCH_TAC THEN
  SPLIT_ASM_TAC THEN
  PAT_ASSUM ``P ==> Q`` (fn thm => ASSUME_TAC (UNDISCH thm)) THEN
  SPLIT_ASM_TAC THEN
  ASSUME_TAC (UNDISCH (SPEC ``tx_bd_queue nic`` TX_INVARIANT_BD_QUEUE_LOCATION_DEFINED_IMP_BD_QUEUE_IN_CPPI_RAM_lemma)) THEN
  ASM_REWRITE_TAC []);

val TX_INVARIANT_IMP_TX_INVARIANT_WELL_DEFINED_lemma = store_thm (
  "TX_INVARIANT_IMP_TX_INVARIANT_WELL_DEFINED_lemma",
  ``!nic READABLE.
    TX_STATE_AUTONOMOUS_TRANSITION_ENABLE_OR_PROCESS_MEMORY_READ_REPLY nic /\
    TX_INVARIANT nic READABLE
    ==>
    TX_INVARIANT_WELL_DEFINED nic``,
  REPEAT GEN_TAC THEN
  REWRITE_TAC [TX_INVARIANT_def] THEN
  REWRITE_TAC [TX_INVARIANT_MEMORY_def] THEN
  DISCH_TAC THEN
  SPLIT_ASM_TAC THEN
  PAT_ASSUM ``P ==> Q`` (fn thm => ASSUME_TAC (UNDISCH thm)) THEN
  ASM_REWRITE_TAC []);

val TX_STATE_AUTONOMOUS_TRANSITION_ENABLE_OR_PROCESS_MEMORY_READ_REPLY_TX_INVARIANT_IMP_TX_INVARIANT_MEMORY_lemma = store_thm (
  "TX_STATE_AUTONOMOUS_TRANSITION_ENABLE_OR_PROCESS_MEMORY_READ_REPLY_TX_INVARIANT_IMP_TX_INVARIANT_MEMORY_lemma",
  ``!nic READABLE.
    TX_STATE_AUTONOMOUS_TRANSITION_ENABLE_OR_PROCESS_MEMORY_READ_REPLY nic /\
    TX_INVARIANT nic READABLE
    ==>
    TX_INVARIANT_MEMORY nic READABLE``,
  REPEAT GEN_TAC THEN
  REWRITE_TAC [TX_INVARIANT_def] THEN
  REWRITE_TAC [TX_INVARIANT_MEMORY_def] THEN
  DISCH_TAC THEN
  SPLIT_ASM_TAC THEN
  PAT_ASSUM ``P ==> Q`` (fn thm => ASSUME_TAC (UNDISCH thm)) THEN
  ASM_REWRITE_TAC []);

val _ = export_theory();

