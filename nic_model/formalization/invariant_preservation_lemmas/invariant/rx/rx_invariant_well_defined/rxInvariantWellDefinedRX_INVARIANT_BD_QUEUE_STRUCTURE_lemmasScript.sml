open HolKernel Parse boolLib bossLib;
open helperTactics;
open stateTheory;
open rxInvariantWellDefinedTheory;
open rx_state_definitionsTheory;
open rxInvariantWellDefinedLemmasTheory;
open rx_bd_queueTheory;
open rx_state_lemmasTheory;
open bd_queue_preservation_lemmasTheory;

val _ = new_theory "rxInvariantWellDefinedRX_INVARIANT_BD_QUEUE_STRUCTURE_lemmas";

val RX_EQ_CURRENT_BD_PA_CURRENT_BD_SOP_BD_PA_EOP_BD_PA_CPPI_RAM_def = Define `
  RX_EQ_CURRENT_BD_PA_CURRENT_BD_SOP_BD_PA_EOP_BD_PA_CPPI_RAM nic nic' =
  (nic.rx.current_bd_pa = nic'.rx.current_bd_pa) /\
  (nic.rx.current_bd = nic'.rx.current_bd) /\
  (nic.rx.sop_bd_pa = nic'.rx.sop_bd_pa) /\
  (nic.rx.eop_bd_pa = nic'.rx.eop_bd_pa) /\
  (nic.regs.CPPI_RAM = nic'.regs.CPPI_RAM)`;

val RX_STATE_WRITE_CPPI_RAM_AND_RX_EQ_CURRENT_BD_PA_CURRENT_BD_SOP_BD_PA_EOP_BD_PA_CPPI_RAM_IMP_RX_INVARIANT_STATE_ISSUE_MEMORY_REQUEST_OR_WRITE_CPPI_RAM_IMP_CURRENT_BD_NDP_EQ_NDP_CURRENT_BD_PA_lemma = store_thm (
  "RX_STATE_WRITE_CPPI_RAM_AND_RX_EQ_CURRENT_BD_PA_CURRENT_BD_SOP_BD_PA_EOP_BD_PA_CPPI_RAM_IMP_RX_INVARIANT_STATE_ISSUE_MEMORY_REQUEST_OR_WRITE_CPPI_RAM_IMP_CURRENT_BD_NDP_EQ_NDP_CURRENT_BD_PA_lemma",
  ``!nic nic'.
    RX_STATE_WRITE_CPPI_RAM nic /\
    RX_STATE_WRITE_CPPI_RAM nic' /\
    RX_EQ_CURRENT_BD_PA_CURRENT_BD_SOP_BD_PA_EOP_BD_PA_CPPI_RAM nic nic'
    ==>
    (RX_INVARIANT_STATE_ISSUE_MEMORY_REQUEST_OR_WRITE_CPPI_RAM_IMP_CURRENT_BD_NDP_EQ_NDP_CURRENT_BD_PA nic
     =
     RX_INVARIANT_STATE_ISSUE_MEMORY_REQUEST_OR_WRITE_CPPI_RAM_IMP_CURRENT_BD_NDP_EQ_NDP_CURRENT_BD_PA nic')``,
  REPEAT GEN_TAC THEN
  REWRITE_TAC [RX_INVARIANT_STATE_ISSUE_MEMORY_REQUEST_OR_WRITE_CPPI_RAM_IMP_CURRENT_BD_NDP_EQ_NDP_CURRENT_BD_PA_def] THEN
  REWRITE_TAC [RX_EQ_CURRENT_BD_PA_CURRENT_BD_SOP_BD_PA_EOP_BD_PA_CPPI_RAM_def] THEN
  DISCH_TAC THEN
  ASM_REWRITE_TAC [RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM_def]);

val RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM_IMP_EQ_RX_INVARIANT_idle_initialized_write_cp_IMP_CURRENT_BD_PA_EQ_SOP_BD_PA_lemma = store_thm (
  "RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM_IMP_EQ_RX_INVARIANT_idle_initialized_write_cp_IMP_CURRENT_BD_PA_EQ_SOP_BD_PA_lemma",
  ``!nic nic'.
    RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM nic /\
    RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM nic'
    ==>
    (RX_INVARIANT_idle_initialized_write_cp_IMP_CURRENT_BD_PA_EQ_SOP_BD_PA nic
     =
     RX_INVARIANT_idle_initialized_write_cp_IMP_CURRENT_BD_PA_EQ_SOP_BD_PA nic')``,
  REPEAT GEN_TAC THEN
  DISCH_TAC THEN
  SPLIT_ASM_TAC THEN
  ASSUME_TAC (UNDISCH (SPEC_ALL RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM_IMP_RX_INVARIANT_idle_initialized_write_cp_IMP_CURRENT_BD_PA_EQ_SOP_BD_PA_lemma)) THEN
  ASSUME_TAC (UNDISCH (SPEC ``nic' : nic_state`` RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM_IMP_RX_INVARIANT_idle_initialized_write_cp_IMP_CURRENT_BD_PA_EQ_SOP_BD_PA_lemma)) THEN
  ASM_REWRITE_TAC []);

val RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM_IMP_EQ_RX_INVARIANT_write_cp_IMP_CURRENT_BD_PA_EQ_CURRENT_BD_NDP_lemma = store_thm (
  "RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM_IMP_EQ_RX_INVARIANT_write_cp_IMP_CURRENT_BD_PA_EQ_CURRENT_BD_NDP_lemma",
  ``!nic nic'.
    RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM nic /\
    RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM nic'
    ==>
    (RX_INVARIANT_write_cp_IMP_CURRENT_BD_PA_EQ_CURRENT_BD_NDP nic
     =
     RX_INVARIANT_write_cp_IMP_CURRENT_BD_PA_EQ_CURRENT_BD_NDP nic')``,
  REPEAT GEN_TAC THEN
  DISCH_TAC THEN
  SPLIT_ASM_TAC THEN
  ASSUME_TAC (UNDISCH (SPEC_ALL RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM_IMP_RX_INVARIANT_write_cp_IMP_CURRENT_BD_PA_EQ_CURRENT_BD_NDP_lemma)) THEN
  ASSUME_TAC (UNDISCH (SPEC ``nic' : nic_state`` RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM_IMP_RX_INVARIANT_write_cp_IMP_CURRENT_BD_PA_EQ_CURRENT_BD_NDP_lemma)) THEN
  ASM_REWRITE_TAC []);

val RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM_AND_EQ_CURRENT_BD_PA_CURRENT_BD_SOP_BD_PA_EOP_BD_PA_CPPI_RAM_IMP_RX_INVARIANT_CURRENT_BD_PA_IN_BD_QUEUE_lemma = store_thm (
  "RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM_AND_EQ_CURRENT_BD_PA_CURRENT_BD_SOP_BD_PA_EOP_BD_PA_CPPI_RAM_IMP_RX_INVARIANT_CURRENT_BD_PA_IN_BD_QUEUE_lemma",
  ``!nic nic'.
    RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM nic /\
    RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM nic' /\
    RX_EQ_CURRENT_BD_PA_CURRENT_BD_SOP_BD_PA_EOP_BD_PA_CPPI_RAM nic nic'
    ==>
    (RX_INVARIANT_CURRENT_BD_PA_IN_BD_QUEUE nic
     =
     RX_INVARIANT_CURRENT_BD_PA_IN_BD_QUEUE nic')``,
  REPEAT GEN_TAC THEN
  REWRITE_TAC [RX_INVARIANT_CURRENT_BD_PA_IN_BD_QUEUE_def] THEN
  REWRITE_TAC [RX_EQ_CURRENT_BD_PA_CURRENT_BD_SOP_BD_PA_EOP_BD_PA_CPPI_RAM_def] THEN
  DISCH_TAC THEN
  SPLIT_ASM_TAC THEN
  ASSUME_TAC (CONJ_ANT_TO_HYP (GSYM (SPEC_ALL EQ_RX_SOP_BD_PA_CPPI_RAM_IMP_EX_RX_BD_QUEUE_lemma))) THEN
  ASSUME_TAC (CONJ_ANT_TO_HYP (SPEC_ALL RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM_IMP_RX_STATE_FETCH_NEXT_BD_OR_ISSUE_MEMORY_REQUEST_OR_WRITE_CPPI_RAM_lemma)) THEN
  ASSUME_TAC (CONJ_ANT_TO_HYP (SPEC ``nic' : nic_state`` RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM_IMP_RX_STATE_FETCH_NEXT_BD_OR_ISSUE_MEMORY_REQUEST_OR_WRITE_CPPI_RAM_lemma)) THEN
  ASM_REWRITE_TAC []);

val RX_STATE_WRITE_CPPI_RAM_POST_PROCESS_AND_EQ_CURRENT_BD_PA_CURRENT_BD_SOP_BD_PA_EOP_BD_PA_CPPI_RAM_IMP_RX_INVARIANT_STATE_WRITE_CPPI_RAM_POST_PROCESS_IMP_EOP_EQ_CURRENT_BD_PA_lemma = store_thm (
  "RX_STATE_WRITE_CPPI_RAM_POST_PROCESS_AND_EQ_CURRENT_BD_PA_CURRENT_BD_SOP_BD_PA_EOP_BD_PA_CPPI_RAM_IMP_RX_INVARIANT_STATE_WRITE_CPPI_RAM_POST_PROCESS_IMP_EOP_EQ_CURRENT_BD_PA_lemma",
  ``!nic nic'.
    RX_STATE_WRITE_CPPI_RAM_POST_PROCESS nic /\
    RX_STATE_WRITE_CPPI_RAM_POST_PROCESS nic' /\
    RX_EQ_CURRENT_BD_PA_CURRENT_BD_SOP_BD_PA_EOP_BD_PA_CPPI_RAM nic nic'
    ==>
    (RX_INVARIANT_STATE_WRITE_CPPI_RAM_POST_PROCESS_IMP_EOP_EQ_CURRENT_BD_PA nic
     =
     RX_INVARIANT_STATE_WRITE_CPPI_RAM_POST_PROCESS_IMP_EOP_EQ_CURRENT_BD_PA nic')``,
  REPEAT GEN_TAC THEN
  REWRITE_TAC [RX_INVARIANT_STATE_WRITE_CPPI_RAM_POST_PROCESS_IMP_EOP_EQ_CURRENT_BD_PA_def] THEN
  REWRITE_TAC [RX_EQ_CURRENT_BD_PA_CURRENT_BD_SOP_BD_PA_EOP_BD_PA_CPPI_RAM_def] THEN
  DISCH_TAC THEN
  ASM_REWRITE_TAC []);

val RX_STATE_POST_PROCESS_AND_EQ_CURRENT_BD_PA_CURRENT_BD_SOP_BD_PA_EOP_BD_PA_CPPI_RAM_IMP_EQ_RX_INVARIANT_BD_QUEUE_STRUCTURE_SUPPORT_lemma = store_thm (
  "RX_STATE_POST_PROCESS_AND_EQ_CURRENT_BD_PA_CURRENT_BD_SOP_BD_PA_EOP_BD_PA_CPPI_RAM_IMP_EQ_RX_INVARIANT_BD_QUEUE_STRUCTURE_SUPPORT_lemma",
  ``!nic nic'.
    RX_STATE_WRITE_CPPI_RAM_POST_PROCESS nic /\
    RX_STATE_WRITE_CPPI_RAM_POST_PROCESS nic' /\
    RX_EQ_CURRENT_BD_PA_CURRENT_BD_SOP_BD_PA_EOP_BD_PA_CPPI_RAM nic nic'
    ==>
    (RX_INVARIANT_BD_QUEUE_STRUCTURE_SUPPORT nic
     =
     RX_INVARIANT_BD_QUEUE_STRUCTURE_SUPPORT nic')``,
  REPEAT GEN_TAC THEN
  DISCH_TAC THEN
  REWRITE_TAC [RX_INVARIANT_BD_QUEUE_STRUCTURE_SUPPORT_def] THEN
  SPLIT_ASM_TAC THEN
  ASSUME_TAC (UNDISCH (SPEC_ALL RX_STATE_WRITE_CPPI_RAM_POST_PROCESS_IMP_RX_STATE_WRITE_CPPI_RAM_lemma)) THEN
  ASSUME_TAC (UNDISCH (SPEC ``nic' : nic_state`` RX_STATE_WRITE_CPPI_RAM_POST_PROCESS_IMP_RX_STATE_WRITE_CPPI_RAM_lemma)) THEN
  ASSUME_TAC (UNDISCH (SPEC_ALL RX_STATE_WRITE_CPPI_RAM_POST_PROCESS_IMP_RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM_lemma)) THEN
  ASSUME_TAC (UNDISCH (SPEC ``nic' : nic_state`` RX_STATE_WRITE_CPPI_RAM_POST_PROCESS_IMP_RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM_lemma)) THEN
  ASSUME_TAC (CONJ_ANT_TO_HYP (SPEC_ALL RX_STATE_WRITE_CPPI_RAM_AND_RX_EQ_CURRENT_BD_PA_CURRENT_BD_SOP_BD_PA_EOP_BD_PA_CPPI_RAM_IMP_RX_INVARIANT_STATE_ISSUE_MEMORY_REQUEST_OR_WRITE_CPPI_RAM_IMP_CURRENT_BD_NDP_EQ_NDP_CURRENT_BD_PA_lemma)) THEN
  ASSUME_TAC (CONJ_ANT_TO_HYP (SPEC_ALL RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM_IMP_EQ_RX_INVARIANT_idle_initialized_write_cp_IMP_CURRENT_BD_PA_EQ_SOP_BD_PA_lemma)) THEN
  ASSUME_TAC (CONJ_ANT_TO_HYP (SPEC_ALL RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM_IMP_EQ_RX_INVARIANT_write_cp_IMP_CURRENT_BD_PA_EQ_CURRENT_BD_NDP_lemma)) THEN
  ASSUME_TAC (CONJ_ANT_TO_HYP (SPEC_ALL RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM_AND_EQ_CURRENT_BD_PA_CURRENT_BD_SOP_BD_PA_EOP_BD_PA_CPPI_RAM_IMP_RX_INVARIANT_CURRENT_BD_PA_IN_BD_QUEUE_lemma)) THEN
  ASSUME_TAC (CONJ_ANT_TO_HYP (SPEC_ALL RX_STATE_WRITE_CPPI_RAM_POST_PROCESS_AND_EQ_CURRENT_BD_PA_CURRENT_BD_SOP_BD_PA_EOP_BD_PA_CPPI_RAM_IMP_RX_INVARIANT_STATE_WRITE_CPPI_RAM_POST_PROCESS_IMP_EOP_EQ_CURRENT_BD_PA_lemma)) THEN
  ASM_REWRITE_TAC []);

val RX_INVARIANT_BD_QUEUE_UNSEEN_BD_QUEUE_DEP_lemma = store_thm (
  "RX_INVARIANT_BD_QUEUE_UNSEEN_BD_QUEUE_DEP_lemma",
  ``!nic nic'.
    (rx_bd_queue nic' = rx_bd_queue nic) /\
    (rx_unseen_bd_queue nic' = rx_unseen_bd_queue nic) /\
    RX_INVARIANT_BD_QUEUE_STRUCTURE nic
    ==>
    RX_INVARIANT_BD_QUEUE_STRUCTURE nic'``,
  REPEAT GEN_TAC THEN
  REWRITE_TAC [RX_INVARIANT_BD_QUEUE_STRUCTURE_def] THEN
  DISCH_TAC THEN
  ASM_REWRITE_TAC []);

val RX_INVARIANT_BD_QUEUE_STRUCTURE_SAME_STATE_DEP_lemma = store_thm (
  "RX_INVARIANT_BD_QUEUE_STRUCTURE_SAME_STATE_DEP_lemma",
  ``!nic nic'.
    (nic'.rx.state = nic.rx.state) /\
    (nic'.rx.sop_bd_pa = nic.rx.sop_bd_pa) /\
    (nic'.rx.current_bd_pa = nic.rx.current_bd_pa) /\
    (nic'.rx.current_bd.ndp = nic.rx.current_bd.ndp) /\
    (nic'.regs.CPPI_RAM = nic.regs.CPPI_RAM) /\
    RX_INVARIANT_BD_QUEUE_STRUCTURE nic
    ==>
    RX_INVARIANT_BD_QUEUE_STRUCTURE nic'``,
  REPEAT GEN_TAC THEN
  DISCH_TAC THEN
  SPLIT_ASM_TAC THEN
  ASSUME_TAC (CONJ_ANT_TO_HYP (SPEC_ALL EQ_RX_SOP_BD_PA_CPPI_RAM_IMP_EX_RX_BD_QUEUE_lemma)) THEN
  ASSUME_TAC (CONJ_ANT_TO_HYP (SPEC_ALL RX_UNSEEN_BD_QUEUE_DEP_lemma)) THEN
  ASSUME_TAC (CONJ_ANT_TO_HYP (SPEC_ALL RX_INVARIANT_BD_QUEUE_UNSEEN_BD_QUEUE_DEP_lemma)) THEN
  ASM_REWRITE_TAC []);

val RX_INVARIANT_BD_QUEUE_STRUCTURE_DEP_lemma = store_thm (
  "RX_INVARIANT_BD_QUEUE_STRUCTURE_DEP_lemma",
  ``!nic nic'.
    RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM nic /\
    RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM nic' /\
    (nic'.rx.sop_bd_pa = nic.rx.sop_bd_pa) /\
    (nic'.rx.current_bd_pa = nic.rx.current_bd_pa) /\
    (nic'.rx.current_bd.ndp = nic.rx.current_bd.ndp) /\
    (nic'.regs.CPPI_RAM = nic.regs.CPPI_RAM) /\
    RX_INVARIANT_BD_QUEUE_STRUCTURE nic
    ==>
    RX_INVARIANT_BD_QUEUE_STRUCTURE nic'``,
  REPEAT GEN_TAC THEN
  DISCH_TAC THEN
  SPLIT_ASM_TAC THEN
  ASSUME_TAC (CONJ_ANT_TO_HYP (SPEC_ALL EQ_RX_SOP_BD_PA_CPPI_RAM_IMP_EX_RX_BD_QUEUE_lemma)) THEN
  ASSUME_TAC (CONJ_ANT_TO_HYP (SPEC_ALL RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM_RX_CURRENT_BD_NDP_EQ_CPPI_RAM_EQ_IMP_RX_UNSEEN_BD_QUEUE_EQ_lemma)) THEN
  ASSUME_TAC (CONJ_ANT_TO_HYP (SPEC_ALL RX_INVARIANT_BD_QUEUE_UNSEEN_BD_QUEUE_DEP_lemma)) THEN
  ASM_REWRITE_TAC []);

val NIC_DELTA_BETWEEN_RX_STATES_ISSUE_MEMORY_REQUEST_OR_WRITE_CPPI_RAM_SUBINVARIANT_PRESERVES_RX_INVARIANT_BD_QUEUE_STRUCTURE_lemma = store_thm (
  "NIC_DELTA_BETWEEN_RX_STATES_ISSUE_MEMORY_REQUEST_OR_WRITE_CPPI_RAM_SUBINVARIANT_PRESERVES_RX_INVARIANT_BD_QUEUE_STRUCTURE_lemma",
  ``!nic_delta nic cppi_ram_write_step_bd_pas.
    NIC_DELTA_WRITES_FIELDs_NOT_NDP_OF_BDs_IN_BD_QUEUE nic_delta nic cppi_ram_write_step_bd_pas (rx_bd_queue nic) /\
    NIC_DELTA_PRESERVES_RX_SOP_BD_PA nic_delta nic /\
    NIC_DELTA_PRESERVES_RX_CURRENT_BD_PA nic_delta nic /\
    NIC_DELTA_PRESERVES_RX_CURRENT_BD_NDP nic_delta nic /\
    RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM nic /\
    RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM (nic_delta nic) /\
    RX_INVARIANT_BD_QUEUE_FINITE nic /\
    RX_INVARIANT_BD_QUEUE_STRUCTURE nic /\
    RX_INVARIANT_BD_QUEUE_STRUCTURE_SUPPORT nic /\
    RX_INVARIANT_BD_QUEUE_NO_OVERLAP (rx_bd_queue nic) /\
    RX_INVARIANT_BD_QUEUE_LOCATION_DEFINED (rx_bd_queue nic)
    ==>
    RX_INVARIANT_BD_QUEUE_STRUCTURE (nic_delta nic)``,
  REPEAT GEN_TAC THEN
  DISCH_TAC THEN
  SPLIT_ASM_TAC THEN
  ASSUME_TAC (CONJ_ANT_TO_HYP (SPEC_ALL RX_NIC_DELTA_PRESERVES_RX_BD_QUEUE_lemma)) THEN
  ASSUME_TAC (CONJ_ANT_TO_HYP (SPEC_ALL RX_SUBINVARIANT_NIC_DELTA_PRESERVES_RX_UNSEEN_BD_QUEUE_lemma)) THEN
  RW_ASM_TAC ``NIC_DELTA_PRESERVES_RX_BD_QUEUE nic_delta nic`` NIC_DELTA_PRESERVES_RX_BD_QUEUE_def THEN
  RW_ASM_TAC ``NIC_DELTA_PRESERVES_RX_UNSEEN_BD_QUEUE nic_delta nic`` NIC_DELTA_PRESERVES_RX_UNSEEN_BD_QUEUE_def THEN
  RW_ASM_TAC ``RX_INVARIANT_BD_QUEUE_STRUCTURE nic`` RX_INVARIANT_BD_QUEUE_STRUCTURE_def THEN
  REWRITE_TAC [RX_INVARIANT_BD_QUEUE_STRUCTURE_def] THEN
  ASM_REWRITE_TAC []);

val NIC_DELTA_BETWEEN_RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM_PRESERVES_BD_QUEUE_LOCATION_IMP_BD_QUEUE_STRUCTURE_PRESERVED_lemma = store_thm (
  "NIC_DELTA_BETWEEN_RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM_PRESERVES_BD_QUEUE_LOCATION_IMP_BD_QUEUE_STRUCTURE_PRESERVED_lemma",
  ``!nic_delta nic cppi_ram_write_step_bd_pas.
    NIC_DELTA_CPPI_RAM_WRITE_EQ_CPPI_RAM_WRITE_STEP_BD_PAs nic_delta nic cppi_ram_write_step_bd_pas /\
    RX_STATE_CPPI_RAM_WRITE_NOT_SOP_BD_PA_WRITE_CURRENT_SOP_OR_EOP_BD_PA nic cppi_ram_write_step_bd_pas /\
    PRESERVES_NON_OVERLAPPING_BD_QUEUE_LOCATION cppi_ram_write_step_bd_pas /\
    NIC_DELTA_PRESERVES_RX_SOP_BD_PA nic_delta nic /\
    NIC_DELTA_PRESERVES_RX_CURRENT_BD_PA nic_delta nic /\
    NIC_DELTA_PRESERVES_RX_CURRENT_BD_NDP nic_delta nic /\
    RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM nic /\
    RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM (nic_delta nic) /\
    RX_INVARIANT_BD_QUEUE_FINITE nic /\
    RX_INVARIANT_BD_QUEUE_STRUCTURE nic /\
    RX_INVARIANT_BD_QUEUE_STRUCTURE_SUPPORT nic /\
    RX_INVARIANT_BD_QUEUE_NO_OVERLAP (rx_bd_queue nic) /\
    RX_INVARIANT_BD_QUEUE_LOCATION_DEFINED (rx_bd_queue nic)
    ==>
    RX_INVARIANT_BD_QUEUE_STRUCTURE (nic_delta nic)``,
  REPEAT GEN_TAC THEN
  DISCH_TAC THEN
  SPLIT_ASM_TAC THEN
  ASSUME_TAC (CONJ_ANT_TO_HYP (SPEC_ALL RX_STATE_CPPI_RAM_WRITE_NOT_SOP_BD_PA_RX_INVARIANT_BD_QUEUE_FINITE_STRUCTURE_SUPPORT_IMP_WRITTEN_BDs_IN_RX_BD_QUEUE_lemma)) THEN
  RW_ASM_TAC ``RX_INVARIANT_BD_QUEUE_STRUCTURE_SUPPORT nic`` RX_INVARIANT_BD_QUEUE_STRUCTURE_SUPPORT_def THEN
  SPLIT_ASM_TAC THEN
  ASSUME_TAC (CONJ_ANT_TO_HYP (SPEC_ALL (REWRITE_RULE [NIC_DELTA_WRITES_FIELDs_NOT_NDP_OF_BDs_IN_BD_QUEUE_def] (NIC_DELTA_BETWEEN_RX_STATES_ISSUE_MEMORY_REQUEST_OR_WRITE_CPPI_RAM_SUBINVARIANT_PRESERVES_RX_INVARIANT_BD_QUEUE_STRUCTURE_lemma)))) THEN
  ASM_REWRITE_TAC []);

val NIC_DELTA_DELTA_PRESERVES_RX_BD_QUEUE_RX_UNSEEN_BD_QUEUE_IMP_NIC_DELTA_PRESERVES_RX_BD_QUEUE_STRUCTURE_lemma = store_thm (
  "NIC_DELTA_DELTA_PRESERVES_RX_BD_QUEUE_RX_UNSEEN_BD_QUEUE_IMP_NIC_DELTA_PRESERVES_RX_BD_QUEUE_STRUCTURE_lemma",
  ``!nic_delta nic.
    RX_INVARIANT_BD_QUEUE_STRUCTURE nic /\
    NIC_DELTA_PRESERVES_RX_BD_QUEUE nic_delta nic /\
    NIC_DELTA_PRESERVES_RX_UNSEEN_BD_QUEUE nic_delta nic
    ==>
    RX_INVARIANT_BD_QUEUE_STRUCTURE (nic_delta nic)``,
  REPEAT GEN_TAC THEN
  REWRITE_TAC [RX_INVARIANT_BD_QUEUE_STRUCTURE_def] THEN
  REWRITE_TAC [NIC_DELTA_PRESERVES_RX_BD_QUEUE_def] THEN
  REWRITE_TAC [NIC_DELTA_PRESERVES_RX_UNSEEN_BD_QUEUE_def] THEN
  DISCH_TAC THEN
  ASM_REWRITE_TAC []);

val NIC_DELTA_BETWEEN_RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM_AND_FETCH_NEXT_BD_PRESERVES_BD_QUEUE_LOCATION_IMP_BD_QUEUE_STRUCTURE_PRESERVED_lemma = store_thm (
  "NIC_DELTA_BETWEEN_RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM_AND_FETCH_NEXT_BD_PRESERVES_BD_QUEUE_LOCATION_IMP_BD_QUEUE_STRUCTURE_PRESERVED_lemma",
  ``!nic_delta nic cppi_ram_write_step_bd_pas.
    NIC_DELTA_CPPI_RAM_WRITE_EQ_CPPI_RAM_WRITE_STEP_BD_PAs nic_delta nic cppi_ram_write_step_bd_pas /\
    RX_STATE_CPPI_RAM_WRITE_NOT_SOP_BD_PA_WRITE_CURRENT_SOP_OR_EOP_BD_PA nic cppi_ram_write_step_bd_pas /\
    PRESERVES_NON_OVERLAPPING_BD_QUEUE_LOCATION cppi_ram_write_step_bd_pas /\
    NIC_DELTA_PRESERVES_RX_SOP_BD_PA nic_delta nic /\
    NIC_DELTA_ASSIGNS_CURRENT_BD_NDP_TO_CURRENT_BD_PA nic_delta nic /\
    NIC_DELTA_PRESERVES_RX_CURRENT_BD_NDP nic_delta nic /\
    RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM nic /\
    RX_STATE_FETCH_NEXT_BD (nic_delta nic) /\
    RX_INVARIANT_BD_QUEUE_FINITE nic /\
    RX_INVARIANT_BD_QUEUE_STRUCTURE nic /\
    RX_INVARIANT_BD_QUEUE_STRUCTURE_SUPPORT nic /\
    RX_INVARIANT_BD_QUEUE_NO_OVERLAP (rx_bd_queue nic) /\
    RX_INVARIANT_BD_QUEUE_LOCATION_DEFINED (rx_bd_queue nic)
    ==>
    RX_INVARIANT_BD_QUEUE_STRUCTURE (nic_delta nic)``,
  REPEAT GEN_TAC THEN
  DISCH_TAC THEN
  SPLIT_ASM_TAC THEN
  ASSUME_TAC (CONJ_ANT_TO_HYP (SPEC_ALL RX_STATE_CPPI_RAM_WRITE_NOT_SOP_BD_PA_RX_INVARIANT_BD_QUEUE_FINITE_STRUCTURE_SUPPORT_IMP_WRITTEN_BDs_IN_RX_BD_QUEUE_lemma)) THEN
  ASSUME_TAC (CONJ_ANT_TO_HYP (REWRITE_RULE [NIC_DELTA_WRITES_FIELDs_NOT_NDP_OF_BDs_IN_BD_QUEUE_def] (SPEC_ALL RX_NIC_DELTA_PRESERVES_RX_BD_QUEUE_lemma))) THEN
  RW_ASM_TAC ``RX_INVARIANT_BD_QUEUE_STRUCTURE_SUPPORT nic`` RX_INVARIANT_BD_QUEUE_STRUCTURE_SUPPORT_def THEN
  SPLIT_ASM_TAC THEN
  ASSUME_TAC (CONJ_ANT_TO_HYP (REWRITE_RULE [NIC_DELTA_WRITES_FIELDs_NOT_NDP_OF_BDs_IN_BD_QUEUE_def] (SPEC_ALL RX_SUBINVARIANT_NIC_DELTA_NEXT_STATE_FETCH_NEXT_BD_PRESERVES_RX_UNSEEN_BD_QUEUE_lemma))) THEN
  MATCH_MP_TAC NIC_DELTA_DELTA_PRESERVES_RX_BD_QUEUE_RX_UNSEEN_BD_QUEUE_IMP_NIC_DELTA_PRESERVES_RX_BD_QUEUE_STRUCTURE_lemma THEN
  ASM_REWRITE_TAC []);

val _ = export_theory();

