open HolKernel Parse boolLib bossLib;
open helperTactics;
open stateTheory;
open rxTheory;
open it_state_definitionsTheory;
open rx_state_definitionsTheory;
open rx_transition_definitionsTheory;
open rxLib;

val _ = new_theory "rx_state_lemmas";

val RX_STATE_IDLE_DEP_lemma = store_thm (
  "RX_STATE_IDLE_DEP_lemma",
  ``!nic nic'.
    RX_STATE_IDLE nic /\
    (nic'.rx.state = nic.rx.state)
    ==>
    RX_STATE_IDLE nic'``,
  REPEAT GEN_TAC THEN
  REWRITE_TAC [RX_STATE_IDLE_def] THEN
  DISCH_TAC THEN
  ASM_REWRITE_TAC []);

val RX_STATE_FETCH_NEXT_BD_DEP_lemma = store_thm (
  "RX_STATE_FETCH_NEXT_BD_DEP_lemma",
  ``!nic nic'.
    RX_STATE_FETCH_NEXT_BD nic /\
    (nic'.rx.state = nic.rx.state)
    ==>
    RX_STATE_FETCH_NEXT_BD nic'``,
  REPEAT GEN_TAC THEN
  REWRITE_TAC [RX_STATE_FETCH_NEXT_BD_def] THEN
  DISCH_TAC THEN
  ASM_REWRITE_TAC []);

val RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_DEP_lemma = store_thm (
  "RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_DEP_lemma",
  ``!nic nic'.
    RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST nic /\
    (nic'.rx.state = nic.rx.state)
    ==>
    RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST nic'``,
  REPEAT GEN_TAC THEN
  REWRITE_TAC [RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_def] THEN
  DISCH_TAC THEN
  ASM_REWRITE_TAC []);

val RX_STATE_WRITE_CURRENT_BD_PA_DEP_lemma = store_thm (
  "RX_STATE_WRITE_CURRENT_BD_PA_DEP_lemma",
  ``!nic nic'.
    RX_STATE_WRITE_CURRENT_BD_PA nic /\
    (nic'.rx.state = nic.rx.state)
    ==>
    RX_STATE_WRITE_CURRENT_BD_PA nic'``,
  REPEAT GEN_TAC THEN
  REWRITE_TAC [RX_STATE_WRITE_CURRENT_BD_PA_def] THEN
  REWRITE_TAC RX_STATE_defs THEN
  DISCH_TAC THEN
  ASM_REWRITE_TAC []);

val RX_STATE_WRITE_EOP_DEP_lemma = store_thm (
  "RX_STATE_WRITE_EOP_DEP_lemma",
  ``!nic nic'.
    RX_STATE_WRITE_EOP nic /\
    (nic'.rx.state = nic.rx.state)
    ==>
    RX_STATE_WRITE_EOP nic'``,
  REPEAT GEN_TAC THEN
  REWRITE_TAC [RX_STATE_WRITE_EOP_def] THEN
  REWRITE_TAC RX_STATE_defs THEN
  DISCH_TAC THEN
  ASM_REWRITE_TAC []);

val RX_STATE_WRITE_EOP_SOP_DEP_lemma = store_thm (
  "RX_STATE_WRITE_EOP_SOP_DEP_lemma",
  ``!nic nic'.
    RX_STATE_WRITE_EOP_SOP nic /\
    (nic'.rx.state = nic.rx.state)
    ==>
    RX_STATE_WRITE_EOP_SOP nic'``,
  REPEAT GEN_TAC THEN
  REWRITE_TAC [RX_STATE_WRITE_EOP_SOP_def] THEN
  REWRITE_TAC [RX_STATE_SET_EOP_EOQ_OR_WRITE_SOP_BUFFER_OFFSET_def] THEN
  DISCH_TAC THEN
  ASM_REWRITE_TAC []);

val RX_STATE_WRITE_SOP_AND_NOT_WRITE_RX_SOP_BD_PA_DEP_lemma = store_thm (
  "RX_STATE_WRITE_SOP_AND_NOT_WRITE_RX_SOP_BD_PA_DEP_lemma",
  ``!nic nic'.
    RX_STATE_WRITE_SOP_AND_NOT_WRITE_RX_SOP_BD_PA nic /\
    (nic'.rx.state = nic.rx.state)
    ==>
    RX_STATE_WRITE_SOP_AND_NOT_WRITE_RX_SOP_BD_PA nic'``,
  REPEAT GEN_TAC THEN
  REWRITE_TAC RX_STATE_CLASSIFICATION_defs THEN
  REWRITE_TAC RX_STATE_defs THEN
  DISCH_TAC THEN
  ASM_REWRITE_TAC []);

val RX_STATE_SET_SOP_EOP_OVERRUN_OR_CLEAR_SOP_OWNER_AND_HDP_DEP_lemma = store_thm (
  "RX_STATE_SET_SOP_EOP_OVERRUN_OR_CLEAR_SOP_OWNER_AND_HDP_DEP_lemma",
  ``!nic nic'.
    RX_STATE_SET_SOP_EOP_OVERRUN_OR_CLEAR_SOP_OWNER_AND_HDP nic /\
    (nic'.rx.state = nic.rx.state)
    ==>
    RX_STATE_SET_SOP_EOP_OVERRUN_OR_CLEAR_SOP_OWNER_AND_HDP nic'``,
  REPEAT GEN_TAC THEN
  REWRITE_TAC [RX_STATE_SET_SOP_EOP_OVERRUN_OR_CLEAR_SOP_OWNER_AND_HDP_def] THEN
  DISCH_TAC THEN
  ASM_REWRITE_TAC []);

val RX_STATE_CLEAR_SOP_OWNER_AND_HDP_DEP_lemma = store_thm (
  "RX_STATE_CLEAR_SOP_OWNER_AND_HDP_DEP_lemma",
  ``!nic nic'.
    RX_STATE_CLEAR_SOP_OWNER_AND_HDP nic /\
    (nic'.rx.state = nic.rx.state)
    ==>
    RX_STATE_CLEAR_SOP_OWNER_AND_HDP nic'``,
  REPEAT GEN_TAC THEN
  REWRITE_TAC [RX_STATE_CLEAR_SOP_OWNER_AND_HDP_def] THEN
  DISCH_TAC THEN
  ASM_REWRITE_TAC []);

val RX_STATE_WRITE_SOP_EOP_AND_WRITE_RX_SOP_BD_PA_DEP_lemma = store_thm (
  "RX_STATE_WRITE_SOP_EOP_AND_WRITE_RX_SOP_BD_PA_DEP_lemma",
  ``!nic nic'.
    RX_STATE_WRITE_SOP_EOP_AND_WRITE_RX_SOP_BD_PA nic /\
    (nic'.rx.state = nic.rx.state)
    ==>
    RX_STATE_WRITE_SOP_EOP_AND_WRITE_RX_SOP_BD_PA nic'``,
  REPEAT GEN_TAC THEN
  REWRITE_TAC [RX_STATE_WRITE_SOP_EOP_AND_WRITE_RX_SOP_BD_PA_def] THEN
  DISCH_TAC THEN
  SPLIT_ASM_TAC THEN
  Cases_on `RX_STATE_CLEAR_SOP_OWNER_AND_HDP nic` THENL
  [
   ASSUME_TAC (CONJ_ANT_TO_HYP (SPEC_ALL RX_STATE_CLEAR_SOP_OWNER_AND_HDP_DEP_lemma)) THEN
   ASM_REWRITE_TAC []
   ,
   ASM_RW_ASM_TAC ``~P`` ``P \/ Q`` THEN
   ASSUME_TAC (CONJ_ANT_TO_HYP (SPEC_ALL RX_STATE_SET_SOP_EOP_OVERRUN_OR_CLEAR_SOP_OWNER_AND_HDP_DEP_lemma)) THEN
   ASM_REWRITE_TAC []
  ]);

val RX_STATE_WRITE_CP_DEP_lemma = store_thm (
  "RX_STATE_WRITE_CP_DEP_lemma",
  ``!nic nic'.
    RX_STATE_WRITE_CP nic /\
    (nic'.rx.state = nic.rx.state)
    ==>
    RX_STATE_WRITE_CP nic'``,
  REPEAT GEN_TAC THEN
  REWRITE_TAC [RX_STATE_WRITE_CP_def] THEN
  DISCH_TAC THEN
  ASM_REWRITE_TAC []);

val RX_STATE_WRITE_EOP_OR_EOP_SOP_DEP_lemma = store_thm (
  "RX_STATE_WRITE_EOP_OR_EOP_SOP_DEP_lemma",
  ``!nic nic'.
    RX_STATE_WRITE_EOP_OR_EOP_SOP nic /\
    (nic'.rx.state = nic.rx.state)
    ==>
    RX_STATE_WRITE_EOP_OR_EOP_SOP nic'``,
  REPEAT GEN_TAC THEN
  REWRITE_TAC [RX_STATE_WRITE_EOP_OR_EOP_SOP_def] THEN
  DISCH_TAC THEN
  SPLIT_ASM_TAC THEN
  Cases_on `RX_STATE_WRITE_EOP nic` THENL
  [
   ASSUME_TAC (CONJ_ANT_TO_HYP (SPEC_ALL RX_STATE_WRITE_EOP_DEP_lemma)) THEN
   ASM_REWRITE_TAC []
   ,
   ASM_RW_ASM_TAC ``~P`` ``P \/ Q`` THEN
   ASSUME_TAC (CONJ_ANT_TO_HYP (SPEC_ALL RX_STATE_WRITE_EOP_SOP_DEP_lemma)) THEN
   ASM_REWRITE_TAC []
  ]);

val RX_STATE_WRITE_CPPI_RAM_AND_NOT_WRITE_RX_SOP_BD_PA_DEP_lemma = store_thm (
  "RX_STATE_WRITE_CPPI_RAM_AND_NOT_WRITE_RX_SOP_BD_PA_DEP_lemma",
  ``!nic nic'.
    RX_STATE_WRITE_CPPI_RAM_AND_NOT_WRITE_RX_SOP_BD_PA nic /\
    (nic'.rx.state = nic.rx.state)
    ==>
    RX_STATE_WRITE_CPPI_RAM_AND_NOT_WRITE_RX_SOP_BD_PA nic'``,
  REPEAT GEN_TAC THEN
  REWRITE_TAC [RX_STATE_WRITE_CPPI_RAM_AND_NOT_WRITE_RX_SOP_BD_PA_def] THEN
  DISCH_TAC THEN
  SPLIT_ASM_TAC THEN
  Cases_on `RX_STATE_WRITE_CURRENT_BD_PA nic` THENL
  [
   ASSUME_TAC (CONJ_ANT_TO_HYP (SPEC_ALL RX_STATE_WRITE_CURRENT_BD_PA_DEP_lemma)) THEN
   ASM_REWRITE_TAC []
   ,
   ASM_RW_ASM_TAC ``~P`` ``P \/ Q``
  ] THEN
  Cases_on `RX_STATE_WRITE_EOP_OR_EOP_SOP nic` THENL
  [
   ASSUME_TAC (CONJ_ANT_TO_HYP (SPEC_ALL RX_STATE_WRITE_EOP_OR_EOP_SOP_DEP_lemma)) THEN
   ASM_REWRITE_TAC []
   ,
   ASM_RW_ASM_TAC ``~P`` ``P \/ Q``
  ] THEN
  ASSUME_TAC (CONJ_ANT_TO_HYP (SPEC_ALL RX_STATE_WRITE_SOP_AND_NOT_WRITE_RX_SOP_BD_PA_DEP_lemma)) THEN
  ASM_REWRITE_TAC []);

val RX_STATE_WRITE_CPPI_RAM_DEP_lemma = store_thm (
  "RX_STATE_WRITE_CPPI_RAM_DEP_lemma",
  ``!nic nic'.
    RX_STATE_WRITE_CPPI_RAM nic /\
    (nic'.rx.state = nic.rx.state)
    ==>
    RX_STATE_WRITE_CPPI_RAM nic'``,
  REPEAT GEN_TAC THEN
  REWRITE_TAC [RX_STATE_WRITE_CPPI_RAM_def] THEN
  DISCH_TAC THEN
  SPLIT_ASM_TAC THEN
  Cases_on `RX_STATE_WRITE_CPPI_RAM_AND_NOT_WRITE_RX_SOP_BD_PA nic` THENL
  [
   ASSUME_TAC (CONJ_ANT_TO_HYP (SPEC_ALL RX_STATE_WRITE_CPPI_RAM_AND_NOT_WRITE_RX_SOP_BD_PA_DEP_lemma)) THEN
   ASM_REWRITE_TAC []
   ,
   ASM_RW_ASM_TAC ``~P`` ``P \/ Q`` THEN
   ASSUME_TAC (CONJ_ANT_TO_HYP (SPEC_ALL RX_STATE_WRITE_SOP_EOP_AND_WRITE_RX_SOP_BD_PA_DEP_lemma)) THEN
   ASM_REWRITE_TAC []
  ]);

val RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM_DEP_lemma = store_thm (
  "RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM_DEP_lemma",
  ``!nic nic'.
    RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM nic /\
    (nic'.rx.state = nic.rx.state)
    ==>
    RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM nic'``,
  REPEAT GEN_TAC THEN
  REWRITE_TAC [RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM_def] THEN
  DISCH_TAC THEN
  SPLIT_ASM_TAC THEN
  Cases_on `RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST nic` THENL
  [
   ASSUME_TAC (CONJ_ANT_TO_HYP (SPEC_ALL RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_DEP_lemma)) THEN
   ASM_REWRITE_TAC []
   ,
   ASM_RW_ASM_TAC ``~P`` ``P \/ Q`` THEN
   ASSUME_TAC (CONJ_ANT_TO_HYP (SPEC_ALL RX_STATE_WRITE_CPPI_RAM_DEP_lemma)) THEN
   ASM_REWRITE_TAC []
  ]);

val RX_STATE_FETCH_NEXT_BD_OR_ISSUE_MEMORY_REQUEST_OR_WRITE_CPPI_RAM_DEP_lemma = store_thm (
  "RX_STATE_FETCH_NEXT_BD_OR_ISSUE_MEMORY_REQUEST_OR_WRITE_CPPI_RAM_DEP_lemma",
  ``!nic nic'.
    RX_STATE_FETCH_NEXT_BD_OR_ISSUE_MEMORY_REQUEST_OR_WRITE_CPPI_RAM nic /\
    (nic'.rx.state = nic.rx.state)
    ==>
    RX_STATE_FETCH_NEXT_BD_OR_ISSUE_MEMORY_REQUEST_OR_WRITE_CPPI_RAM nic'``,
  REPEAT GEN_TAC THEN
  REWRITE_TAC [RX_STATE_FETCH_NEXT_BD_OR_ISSUE_MEMORY_REQUEST_OR_WRITE_CPPI_RAM_def] THEN
  DISCH_TAC THEN
  SPLIT_ASM_TAC THEN
  Cases_on `RX_STATE_FETCH_NEXT_BD nic` THENL
  [
   ASSUME_TAC (CONJ_ANT_TO_HYP (SPEC_ALL RX_STATE_FETCH_NEXT_BD_DEP_lemma)) THEN
   ASM_REWRITE_TAC []
   ,
   ASM_RW_ASM_TAC ``~P`` ``P \/ Q``
  ] THEN
  Cases_on `RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST nic` THENL
  [
   ASSUME_TAC (CONJ_ANT_TO_HYP (SPEC_ALL RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_DEP_lemma)) THEN
   ASM_REWRITE_TAC []
   ,
   ASM_RW_ASM_TAC ``~P`` ``P \/ Q``
  ] THEN
  ASSUME_TAC (CONJ_ANT_TO_HYP (SPEC_ALL RX_STATE_WRITE_CPPI_RAM_DEP_lemma)) THEN
  ASM_REWRITE_TAC []);

val RX_STATE_WRITE_CPPI_RAM_POST_PROCESS_DEP_lemma = store_thm (
  "RX_STATE_WRITE_CPPI_RAM_POST_PROCESS_DEP_lemma",
  ``!nic nic'.
    RX_STATE_WRITE_CPPI_RAM_POST_PROCESS nic /\
    (nic'.rx.state = nic.rx.state)
    ==>
    RX_STATE_WRITE_CPPI_RAM_POST_PROCESS nic'``,
  REPEAT GEN_TAC THEN
  REWRITE_TAC [RX_STATE_WRITE_CPPI_RAM_POST_PROCESS_def] THEN
  DISCH_TAC THEN
  SPLIT_ASM_TAC THEN
  Cases_on `RX_STATE_WRITE_EOP_OR_EOP_SOP nic` THENL
  [
   ASSUME_TAC (CONJ_ANT_TO_HYP (SPEC_ALL RX_STATE_WRITE_EOP_OR_EOP_SOP_DEP_lemma)) THEN
   ASM_REWRITE_TAC []
   ,
   ASM_RW_ASM_TAC ``~P`` ``P \/ Q``
  ] THEN
  Cases_on `RX_STATE_WRITE_SOP_AND_NOT_WRITE_RX_SOP_BD_PA nic` THENL
  [
   ASSUME_TAC (CONJ_ANT_TO_HYP (SPEC_ALL RX_STATE_WRITE_SOP_AND_NOT_WRITE_RX_SOP_BD_PA_DEP_lemma)) THEN
   ASM_REWRITE_TAC []
   ,
   ASM_RW_ASM_TAC ``~P`` ``P \/ Q``
  ] THEN
  ASSUME_TAC (CONJ_ANT_TO_HYP (SPEC_ALL RX_STATE_WRITE_SOP_EOP_AND_WRITE_RX_SOP_BD_PA_DEP_lemma)) THEN
  ASM_REWRITE_TAC []);

val RX_STATE_AUTONOMOUS_TRANSITION_ENABLE_DEP_lemma = store_thm (
  "RX_STATE_AUTONOMOUS_TRANSITION_ENABLE_DEP_lemma",
  ``!nic nic'.
    RX_STATE_AUTONOMOUS_TRANSITION_ENABLE nic /\
    (nic'.it.state = nic.it.state) /\
    (nic'.rx = nic.rx) /\
    (nic'.rd = nic.rd)
    ==>
    RX_STATE_AUTONOMOUS_TRANSITION_ENABLE nic'``,
  REPEAT GEN_TAC THEN
  REWRITE_TAC [RX_STATE_AUTONOMOUS_TRANSITION_ENABLE_CONJ_rws] THEN
  DISCH_TAC THEN
  ASM_REWRITE_TAC []);














val RX_STATE_FETCH_NEXT_BD_IMP_RX_STATE_FETCH_NEXT_BD_OR_ISSUE_MEMORY_REQUEST_OR_WRITE_CPPI_RAM_lemma = store_thm (
  "RX_STATE_FETCH_NEXT_BD_IMP_RX_STATE_FETCH_NEXT_BD_OR_ISSUE_MEMORY_REQUEST_OR_WRITE_CPPI_RAM_lemma",
  ``!nic.
    RX_STATE_FETCH_NEXT_BD nic
    ==>
    RX_STATE_FETCH_NEXT_BD_OR_ISSUE_MEMORY_REQUEST_OR_WRITE_CPPI_RAM nic``,
  GEN_TAC THEN
  DISCH_TAC THEN
  REWRITE_TAC [RX_STATE_FETCH_NEXT_BD_OR_ISSUE_MEMORY_REQUEST_OR_WRITE_CPPI_RAM_def] THEN
  ASM_REWRITE_TAC []);

val RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM_IMP_RX_STATE_FETCH_NEXT_BD_OR_ISSUE_MEMORY_REQUEST_OR_WRITE_CPPI_RAM_lemma = store_thm (
  "RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM_IMP_RX_STATE_FETCH_NEXT_BD_OR_ISSUE_MEMORY_REQUEST_OR_WRITE_CPPI_RAM_lemma",
  ``!nic.
    RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM nic
    ==>
    RX_STATE_FETCH_NEXT_BD_OR_ISSUE_MEMORY_REQUEST_OR_WRITE_CPPI_RAM nic``,
  GEN_TAC THEN
  REWRITE_TAC RX_STATE_CLASSIFICATION_defs THEN
  DISCH_TAC THEN
  ASM_REWRITE_TAC []);

val RX_STATE_WRITE_CPPI_RAM_POST_PROCESS_IMP_RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM_lemma = store_thm (
  "RX_STATE_WRITE_CPPI_RAM_POST_PROCESS_IMP_RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM_lemma",
  ``!nic.
    RX_STATE_WRITE_CPPI_RAM_POST_PROCESS nic
    ==>
    RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM nic``,
  GEN_TAC THEN
  REWRITE_TAC RX_STATE_CLASSIFICATION_defs THEN
  DISCH_TAC THEN
  ASM_REWRITE_TAC [GSYM boolTheory.DISJ_ASSOC]);

val RX_STATE_WRITE_CPPI_RAM_POST_PROCESS_IMP_RX_STATE_WRITE_CPPI_RAM_lemma = store_thm (
  "RX_STATE_WRITE_CPPI_RAM_POST_PROCESS_IMP_RX_STATE_WRITE_CPPI_RAM_lemma",
  ``!nic.
    RX_STATE_WRITE_CPPI_RAM_POST_PROCESS nic
    ==>
    RX_STATE_WRITE_CPPI_RAM nic``,
  GEN_TAC THEN
  REWRITE_TAC RX_STATE_CLASSIFICATION_defs THEN
  DISCH_TAC THEN
  ASM_REWRITE_TAC [GSYM boolTheory.DISJ_ASSOC]);

val RX_STATE_WRITE_SOP_AND_NOT_WRITE_RX_SOP_BD_PA_IMP_RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM_lemma = store_thm (
  "RX_STATE_WRITE_SOP_AND_NOT_WRITE_RX_SOP_BD_PA_IMP_RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM_lemma",
  ``!nic.
    RX_STATE_WRITE_SOP_AND_NOT_WRITE_RX_SOP_BD_PA nic
    ==>
    RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM nic``,
  GEN_TAC THEN
  REWRITE_TAC RX_STATE_CLASSIFICATION_defs THEN
  DISCH_TAC THEN
  ASM_REWRITE_TAC []);

val RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_IMP_RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM_lemma = store_thm (
  "RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_IMP_RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM_lemma",
  ``!nic.
    RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST nic
    ==>
    RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM nic``,
  GEN_TAC THEN
  REWRITE_TAC [RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM_def] THEN
  DISCH_TAC THEN
  ASM_REWRITE_TAC []);

val RX_STATE_WRITE_PACKET_ERROR_IMP_RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM_lemma = store_thm (
  "RX_STATE_WRITE_PACKET_ERROR_IMP_RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM_lemma",
  ``!nic.
    RX_STATE_WRITE_PACKET_ERROR nic
    ==>
    RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM nic``,
  GEN_TAC THEN
  REWRITE_TAC RX_STATE_CLASSIFICATION_defs THEN
  DISCH_TAC THEN
  ASM_REWRITE_TAC []);

val RX_STATE_write_packet_error_IMP_RX_STATE_WRITE_PACKET_ERROR_lemma = store_thm (
  "RX_STATE_write_packet_error_IMP_RX_STATE_WRITE_PACKET_ERROR_lemma",
  ``!nic.
    (nic.rx.state = rx_write_packet_error)
    ==>
    RX_STATE_WRITE_PACKET_ERROR nic``,
    REWRITE_TAC [RX_STATE_WRITE_PACKET_ERROR_def]);

val RX_STATE_WRITE_PACKET_ERROR_IMP_RX_STATE_WRITE_CURRENT_BD_PA_lemma = store_thm (
  "RX_STATE_WRITE_PACKET_ERROR_IMP_RX_STATE_WRITE_CURRENT_BD_PA_lemma",
  ``!nic.
    RX_STATE_WRITE_PACKET_ERROR nic
    ==>
    RX_STATE_WRITE_CURRENT_BD_PA nic``,
  GEN_TAC THEN
  DISCH_TAC THEN
  ASM_REWRITE_TAC [RX_STATE_WRITE_CURRENT_BD_PA_def, RX_STATE_WRITE_PACKET_ERROR_def]);

val RX_STATE_WRITE_PACKET_ERROR_IMP_RX_STATE_FETCH_NEXT_BD_OR_ISSUE_MEMORY_REQUEST_OR_WRITE_CPPI_RAM_lemma = store_thm (
  "RX_STATE_WRITE_PACKET_ERROR_IMP_RX_STATE_FETCH_NEXT_BD_OR_ISSUE_MEMORY_REQUEST_OR_WRITE_CPPI_RAM_lemma",
  ``!nic.
    RX_STATE_WRITE_PACKET_ERROR nic
    ==>
    RX_STATE_FETCH_NEXT_BD_OR_ISSUE_MEMORY_REQUEST_OR_WRITE_CPPI_RAM nic``,
  GEN_TAC THEN
  REWRITE_TAC RX_STATE_CLASSIFICATION_defs THEN
  DISCH_TAC THEN
  ASM_REWRITE_TAC []);






val RX_STATE_write_packet_error_IMP_RX_STATE_WRITE_RX_VLAN_ENCAP_lemma = store_thm (
  "RX_STATE_write_packet_error_IMP_RX_STATE_WRITE_RX_VLAN_ENCAP_lemma",
  ``!nic.
    (nic.rx.state = rx_write_rx_vlan_encap)
    ==>
    RX_STATE_WRITE_RX_VLAN_ENCAP nic``,
    REWRITE_TAC [RX_STATE_WRITE_RX_VLAN_ENCAP_def]);

val RX_STATE_write_rx_vlan_encap_IMP_RX_STATE_WRITE_CURRENT_BD_PA_lemma = store_thm (
  "RX_STATE_write_rx_vlan_encap_IMP_RX_STATE_WRITE_CURRENT_BD_PA_lemma",
  ``!nic.
    (nic.rx.state = rx_write_rx_vlan_encap)
    ==>
    RX_STATE_WRITE_CURRENT_BD_PA nic``,
  GEN_TAC THEN
  DISCH_TAC THEN
  ASM_REWRITE_TAC [RX_STATE_WRITE_CURRENT_BD_PA_def, RX_STATE_WRITE_RX_VLAN_ENCAP_def]);

val RX_STATE_WRITE_RX_VLAN_ENCAP_IMP_RX_STATE_WRITE_CURRENT_BD_PA_lemma = store_thm (
  "RX_STATE_WRITE_RX_VLAN_ENCAP_IMP_RX_STATE_WRITE_CURRENT_BD_PA_lemma",
  ``!nic.
    RX_STATE_WRITE_RX_VLAN_ENCAP nic
    ==>
    RX_STATE_WRITE_CURRENT_BD_PA nic``,
  GEN_TAC THEN
  DISCH_TAC THEN
  ASM_REWRITE_TAC [RX_STATE_WRITE_CURRENT_BD_PA_def, RX_STATE_WRITE_RX_VLAN_ENCAP_def]);

val RX_STATE_WRITE_RX_VLAN_ENCAP_IMP_RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM_lemma = store_thm (
  "RX_STATE_WRITE_RX_VLAN_ENCAP_IMP_RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM_lemma",
  ``!nic.
    RX_STATE_WRITE_RX_VLAN_ENCAP nic
    ==>
    RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM nic``,
  GEN_TAC THEN
  REWRITE_TAC RX_STATE_CLASSIFICATION_defs THEN
  DISCH_TAC THEN
  ASM_REWRITE_TAC []);








val RX_STATE_write_from_port_IMP_RX_STATE_WRITE_FROM_PORT_lemma = store_thm (
  "RX_STATE_write_from_port_IMP_RX_STATE_WRITE_FROM_PORT_lemma",
  ``!nic.
    (nic.rx.state = rx_write_from_port)
    ==>
    RX_STATE_WRITE_FROM_PORT nic``,
    REWRITE_TAC [RX_STATE_WRITE_FROM_PORT_def]);

val RX_STATE_write_from_port_IMP_RX_STATE_WRITE_CURRENT_BD_PA_lemma = store_thm (
  "RX_STATE_write_from_port_IMP_RX_STATE_WRITE_CURRENT_BD_PA_lemma",
  ``!nic.
    RX_STATE_WRITE_FROM_PORT nic
    ==>
    RX_STATE_WRITE_CURRENT_BD_PA nic``,
  GEN_TAC THEN
  DISCH_TAC THEN
  ASM_REWRITE_TAC [RX_STATE_WRITE_CURRENT_BD_PA_def, RX_STATE_WRITE_FROM_PORT_def]);

val RX_STATE_WRITE_FROM_PORT_IMP_RX_STATE_WRITE_CURRENT_BD_PA_lemma = store_thm (
  "RX_STATE_WRITE_FROM_PORT_IMP_RX_STATE_WRITE_CURRENT_BD_PA_lemma",
  ``!nic.
    RX_STATE_WRITE_FROM_PORT nic
    ==>
    RX_STATE_WRITE_CURRENT_BD_PA nic``,
  GEN_TAC THEN
  DISCH_TAC THEN
  ASM_REWRITE_TAC [RX_STATE_WRITE_CURRENT_BD_PA_def, RX_STATE_WRITE_FROM_PORT_def]);

val RX_STATE_WRITE_FROM_PORT_IMP_RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM_lemma = store_thm (
  "RX_STATE_WRITE_FROM_PORT_IMP_RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM_lemma",
  ``!nic.
    RX_STATE_WRITE_FROM_PORT nic
    ==>
    RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM nic``,
  GEN_TAC THEN
  REWRITE_TAC RX_STATE_CLASSIFICATION_defs THEN
  DISCH_TAC THEN
  ASM_REWRITE_TAC []);







val RX_STATE_write_eop_buffer_length_IMP_RX_STATE_WRITE_EOP_OR_EOP_SOP_lemma = store_thm (
  "RX_STATE_write_eop_buffer_length_IMP_RX_STATE_WRITE_EOP_OR_EOP_SOP_lemma",
  ``!nic.
    (nic.rx.state = rx_write_eop_buffer_length)
    ==>
    RX_STATE_WRITE_EOP_OR_EOP_SOP nic``,
  GEN_TAC THEN
  DISCH_TAC THEN
  REWRITE_TAC RX_STATE_CLASSIFICATION_defs THEN
  ASM_REWRITE_TAC [RX_STATE_WRITE_EOP_BUFFER_LENGTH_def]);

val RX_STATE_WRITE_EOP_BUFFER_LENGTH_IMP_RX_STATE_WRITE_EOP_lemma = store_thm (
  "RX_STATE_WRITE_EOP_BUFFER_LENGTH_IMP_RX_STATE_WRITE_EOP_lemma",
  ``!nic.
    RX_STATE_WRITE_EOP_BUFFER_LENGTH nic
    ==>
    RX_STATE_WRITE_EOP nic``,
  GEN_TAC THEN
  DISCH_TAC THEN
  ASM_REWRITE_TAC [RX_STATE_WRITE_EOP_def, RX_STATE_WRITE_EOP_BUFFER_LENGTH_def]);

val RX_STATE_WRITE_EOP_BUFFER_LENGTH_IMP_RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM_lemma = store_thm (
  "RX_STATE_WRITE_EOP_BUFFER_LENGTH_IMP_RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM_lemma",
  ``!nic.
    RX_STATE_WRITE_EOP_BUFFER_LENGTH nic
    ==>
    RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM nic``,
  GEN_TAC THEN
  DISCH_TAC THEN
  REWRITE_TAC RX_STATE_CLASSIFICATION_defs THEN
  ASM_REWRITE_TAC []);








val RX_STATE_set_eop_eop_IMP_RX_STATE_WRITE_EOP_OR_EOP_SOP_lemma = store_thm (
  "RX_STATE_set_eop_eop_IMP_RX_STATE_WRITE_EOP_OR_EOP_SOP_lemma",
  ``!nic.
    (nic.rx.state = rx_set_eop_eop)
    ==>
    RX_STATE_WRITE_EOP_OR_EOP_SOP nic``,
  GEN_TAC THEN
  DISCH_TAC THEN
  REWRITE_TAC RX_STATE_CLASSIFICATION_defs THEN
  ASM_REWRITE_TAC [RX_STATE_SET_EOP_EOP_def]);

val RX_STATE_SET_EOP_EOP_IMP_RX_STATE_WRITE_EOP_lemma = store_thm (
  "RX_STATE_SET_EOP_EOP_IMP_RX_STATE_WRITE_EOP_lemma",
  ``!nic.
    RX_STATE_SET_EOP_EOP nic
    ==>
    RX_STATE_WRITE_EOP nic``,
  GEN_TAC THEN
  DISCH_TAC THEN
  ASM_REWRITE_TAC [RX_STATE_WRITE_EOP_def, RX_STATE_SET_EOP_EOP_def]);

val RX_STATE_SET_EOP_EOP_IMP_RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM_lemma = store_thm (
  "RX_STATE_SET_EOP_EOP_IMP_RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM_lemma",
  ``!nic.
    RX_STATE_SET_EOP_EOP nic
    ==>
    RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM nic``,
  GEN_TAC THEN
  DISCH_TAC THEN
  REWRITE_TAC RX_STATE_CLASSIFICATION_defs THEN
  ASM_REWRITE_TAC []);







val RX_STATE_SET_EOP_EOQ_OR_WRITE_SOP_BUFFER_OFFSET_IMP_RX_STATE_WRITE_EOP_OR_EOP_SOP_lemma = store_thm (
  "RX_STATE_SET_EOP_EOQ_OR_WRITE_SOP_BUFFER_OFFSET_IMP_RX_STATE_WRITE_EOP_OR_EOP_SOP_lemma",
  ``!nic.
    RX_STATE_SET_EOP_EOQ_OR_WRITE_SOP_BUFFER_OFFSET nic
    ==>
    RX_STATE_WRITE_EOP_OR_EOP_SOP nic``,
  GEN_TAC THEN
  REWRITE_TAC RX_STATE_CLASSIFICATION_defs THEN
  REWRITE_TAC [boolTheory.OR_INTRO_THM2]);

val RX_STATE_SET_EOP_EOQ_OR_WRITE_SOP_BUFFER_OFFSET_IMP_RX_STATE_WRITE_CPPI_RAM_POST_PROCESS_lemma = store_thm (
  "RX_STATE_SET_EOP_EOQ_OR_WRITE_SOP_BUFFER_OFFSET_IMP_RX_STATE_WRITE_CPPI_RAM_POST_PROCESS_lemma",
  ``!nic.
    RX_STATE_SET_EOP_EOQ_OR_WRITE_SOP_BUFFER_OFFSET nic
    ==>
    RX_STATE_WRITE_CPPI_RAM_POST_PROCESS nic``,
  GEN_TAC THEN
  REWRITE_TAC RX_STATE_CLASSIFICATION_defs THEN
  DISCH_TAC THEN
  ASM_REWRITE_TAC []);

val RX_STATE_SET_EOP_EOQ_OR_WRITE_SOP_BUFFER_OFFSET_IMP_RX_STATE_WRITE_EOP_SOP_lemma = store_thm (
  "RX_STATE_SET_EOP_EOQ_OR_WRITE_SOP_BUFFER_OFFSET_IMP_RX_STATE_WRITE_EOP_SOP_lemma",
  ``!nic.
    RX_STATE_SET_EOP_EOQ_OR_WRITE_SOP_BUFFER_OFFSET nic
    ==>
    RX_STATE_WRITE_EOP_SOP nic``,
  GEN_TAC THEN
  REWRITE_TAC RX_STATE_CLASSIFICATION_defs THEN
  DISCH_TAC THEN
  ASM_REWRITE_TAC []);

val RX_STATE_SET_EOP_EOQ_OR_WRITE_SOP_BUFFER_OFFSET_IMP_RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM_lemma = store_thm (
  "RX_STATE_SET_EOP_EOQ_OR_WRITE_SOP_BUFFER_OFFSET_IMP_RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM_lemma",
  ``!nic.
    RX_STATE_SET_EOP_EOQ_OR_WRITE_SOP_BUFFER_OFFSET nic
    ==>
    RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM nic``,
  GEN_TAC THEN
  DISCH_TAC THEN
  REWRITE_TAC RX_STATE_CLASSIFICATION_defs THEN
  ASM_REWRITE_TAC []);

val NOT_RX_STATE_IDLE_IMP_RX_STATE_FETCH_NEXT_BD_OR_ISSUE_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM_OR_WRITE_CP_lemma = store_thm (
  "NOT_RX_STATE_IDLE_IMP_RX_STATE_FETCH_NEXT_BD_OR_ISSUE_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM_OR_WRITE_CP_lemma",
  ``!nic.
    ~RX_STATE_IDLE nic
    ==>
    RX_STATE_FETCH_NEXT_BD nic \/
    RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM nic \/
    RX_STATE_WRITE_CP nic``,
  GEN_TAC THEN
  REWRITE_TAC RX_STATE_CLASSIFICATION_defs THEN
  REWRITE_TAC RX_STATE_defs THEN
  Cases_on `nic.rx.state` THEN
  REWRITE_TAC []);

val RX_STATE_AUTONOMOUS_TRANSITION_ENABLE_SPLIT_RX_STATEs_lemma = store_thm (
  "RX_STATE_AUTONOMOUS_TRANSITION_ENABLE_SPLIT_RX_STATEs_lemma",
  ``!nic.
    RX_STATE_AUTONOMOUS_TRANSITION_ENABLE nic
    ==>
    RX_STATE_RECEIVE_FRAME nic \/
    RX_STATE_FETCH_NEXT_BD nic \/
    RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM nic \/
    RX_STATE_WRITE_CP nic``,
  GEN_TAC THEN
  REWRITE_TAC [RX_STATE_AUTONOMOUS_TRANSITION_ENABLE_def] THEN
  REWRITE_TAC [schedulerTheory.RX_ENABLE_def] THEN
  REWRITE_TAC [GSYM RX_STATE_IDLE_def] THEN
  REWRITE_TAC [GSYM RX_BD_QUEUE_EMPTY_def] THEN
  REWRITE_TAC [GSYM rd_state_definitionsTheory.RD_STATE_IDLE_def] THEN
  REWRITE_TAC [GSYM IT_STATE_INITIALIZED_def] THEN
  DISCH_TAC THEN
  REWRITE_TAC [RX_STATE_RECEIVE_FRAME_def] THEN
  PAT_ASSUM ``P \/ Q`` (fn thm => ASSUME_TAC thm THEN ASM_CASES_TAC ((#1 o dest_disj o concl) thm)) THENL
  [
   ASM_REWRITE_TAC []
   ,
   ASM_RW_ASM_TAC ``~P`` ``P \/ Q`` THEN
   ASSUME_TAC (UNDISCH (SPEC_ALL NOT_RX_STATE_IDLE_IMP_RX_STATE_FETCH_NEXT_BD_OR_ISSUE_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM_OR_WRITE_CP_lemma)) THEN
   ASM_REWRITE_TAC []
  ]);

val RX_STATE_AUTONOMOUS_TRANSITION_ENABLE_IMP_RX_STATE_THREE_CASEs_lemma = store_thm (
  "RX_STATE_AUTONOMOUS_TRANSITION_ENABLE_IMP_RX_STATE_THREE_CASEs_lemma",
  ``!nic.
    RX_STATE_AUTONOMOUS_TRANSITION_ENABLE nic
    ==>
    RX_STATE_RECEIVE_FRAME nic \/
    RX_STATE_FETCH_NEXT_BD_OR_ISSUE_MEMORY_REQUEST_OR_WRITE_CPPI_RAM nic \/
    RX_STATE_WRITE_CP nic``,
  GEN_TAC THEN
  DISCH_TAC THEN
  ASSUME_TAC (UNDISCH (SPEC_ALL RX_STATE_AUTONOMOUS_TRANSITION_ENABLE_SPLIT_RX_STATEs_lemma)) THEN
  REWRITE_TAC [RX_STATE_FETCH_NEXT_BD_OR_ISSUE_MEMORY_REQUEST_OR_WRITE_CPPI_RAM_def] THEN
  REWRITE_TAC [GSYM boolTheory.DISJ_ASSOC] THEN
  RW_ASM_TAC ``P \/ Q`` RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM_def THEN
  RW_ASM_TAC ``P \/ Q`` (GSYM boolTheory.DISJ_ASSOC) THEN
  ASM_REWRITE_TAC []);

val RX_STATE_AUTONOMOUS_TRANSITION_ENABLE_IMP_RX_STATE_FIVE_CASEs_lemma = store_thm (
  "RX_STATE_AUTONOMOUS_TRANSITION_ENABLE_IMP_RX_STATE_FIVE_CASEs_lemma",
  ``!nic.
    RX_STATE_AUTONOMOUS_TRANSITION_ENABLE nic
    ==>
    RX_STATE_RECEIVE_FRAME nic \/
    RX_STATE_FETCH_NEXT_BD nic \/
    RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST nic \/
    RX_STATE_WRITE_CPPI_RAM nic \/
    RX_STATE_WRITE_CP nic``,
  GEN_TAC THEN
  DISCH_TAC THEN
  ASSUME_TAC (UNDISCH (SPEC_ALL RX_STATE_AUTONOMOUS_TRANSITION_ENABLE_SPLIT_RX_STATEs_lemma)) THEN
  RW_ASM_TAC ``P \/ Q`` RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM_def THEN
  RW_ASM_TAC ``P \/ Q`` (GSYM boolTheory.DISJ_ASSOC) THEN
  ASM_REWRITE_TAC []);

val RX_STATE_AUTONOMOUS_TRANSITION_ENABLE_IMP_RX_STATE_CASEs_lemma = store_thm (
  "RX_STATE_AUTONOMOUS_TRANSITION_ENABLE_IMP_RX_STATE_CASEs_lemma",
  ``!nic.
    RX_STATE_AUTONOMOUS_TRANSITION_ENABLE nic
    ==>
    RX_STATE_RECEIVE_FRAME nic \/
    RX_STATE_FETCH_NEXT_BD nic \/
    RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST nic \/
    RX_STATE_WRITE_PACKET_ERROR nic \/
    RX_STATE_WRITE_RX_VLAN_ENCAP nic \/
    RX_STATE_WRITE_FROM_PORT nic \/
    RX_STATE_WRITE_EOP_BUFFER_LENGTH nic \/
    RX_STATE_SET_EOP_EOP nic \/
    RX_STATE_SET_EOP_EOQ_OR_WRITE_SOP_BUFFER_OFFSET nic \/
    RX_STATE_WRITE_SOP_BUFFER_OFFSET nic \/
    RX_STATE_WRITE_SOP_BUFFER_LENGTH nic \/
    RX_STATE_SET_SOP_SOP nic \/
    RX_STATE_WRITE_SOP_PASS_CRC nic \/
    RX_STATE_WRITE_SOP_LONG nic \/
    RX_STATE_WRITE_SOP_SHORT nic \/
    RX_STATE_WRITE_SOP_MAC_CTL nic \/
    RX_STATE_WRITE_SOP_PACKET_LENGTH nic \/
    RX_STATE_SET_SOP_EOP_OVERRUN_OR_CLEAR_SOP_OWNER_AND_HDP nic \/
    RX_STATE_CLEAR_SOP_OWNER_AND_HDP nic \/
    RX_STATE_WRITE_CP nic``,
  GEN_TAC THEN
  DISCH_TAC THEN
  ASSUME_TAC (UNDISCH (SPEC_ALL RX_STATE_AUTONOMOUS_TRANSITION_ENABLE_SPLIT_RX_STATEs_lemma)) THEN
  RW_ASM_TAC ``P \/ Q`` RX_STATE_CLASSIFICATION_CONJ_rws THEN
  RW_ASM_TAC ``P \/ Q`` (GSYM boolTheory.DISJ_ASSOC) THEN
  ASM_REWRITE_TAC []);

val RX_STATE_CASE_lemma = store_thm (
  "RX_STATE_CASE_lemma",
  ``!nic.
    RX_STATE_IDLE nic \/
    RX_STATE_FETCH_NEXT_BD nic \/
    RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM nic \/
    RX_STATE_WRITE_CP nic``,
  GEN_TAC THEN
  REWRITE_TAC RX_STATE_CLASSIFICATION_defs THEN
  REWRITE_TAC RX_STATE_defs THEN
  Cases_on `nic.rx.state` THEN
  ASM_REWRITE_TAC []);

val RX_STATE_WRITE_EOP_OR_EOP_SOP_IMP_RX_STATE_WRITE_CPPI_RAM_POST_PROCESS_lemma = store_thm (
  "RX_STATE_WRITE_EOP_OR_EOP_SOP_IMP_RX_STATE_WRITE_CPPI_RAM_POST_PROCESS_lemma",
  ``!nic.
    RX_STATE_WRITE_EOP_OR_EOP_SOP nic
    ==>
    RX_STATE_WRITE_CPPI_RAM_POST_PROCESS nic``,
  GEN_TAC THEN
  REWRITE_TAC [RX_STATE_WRITE_CPPI_RAM_POST_PROCESS_def] THEN
  REWRITE_TAC [RX_STATE_WRITE_SOP_AND_NOT_WRITE_RX_SOP_BD_PA_def] THEN
  DISCH_TAC THEN
  ASM_REWRITE_TAC []);

val RX_STATE_WRITE_CPPI_RAM_EOP_OR_EOP_SOP_IMP_RX_STATE_FETCH_NEXT_BD_OR_ISSUE_MEMORY_REQUEST_OR_WRITE_CPPI_RAM_lemma = store_thm (
  "RX_STATE_WRITE_CPPI_RAM_EOP_OR_EOP_SOP_IMP_RX_STATE_FETCH_NEXT_BD_OR_ISSUE_MEMORY_REQUEST_OR_WRITE_CPPI_RAM_lemma",
  ``!nic.
    RX_STATE_WRITE_EOP_OR_EOP_SOP nic
    ==>
    RX_STATE_FETCH_NEXT_BD_OR_ISSUE_MEMORY_REQUEST_OR_WRITE_CPPI_RAM nic``,
  GEN_TAC THEN
  REWRITE_TAC RX_STATE_CLASSIFICATION_defs THEN
  DISCH_TAC THEN
  ASM_REWRITE_TAC []);

val RX_STATE_WRITE_CPPI_RAM_POST_PROCESS_IMP_RX_STATE_FETCH_NEXT_BD_OR_ISSUE_MEMORY_REQUEST_OR_WRITE_CPPI_RAM_lemma = store_thm (
  "RX_STATE_WRITE_CPPI_RAM_POST_PROCESS_IMP_RX_STATE_FETCH_NEXT_BD_OR_ISSUE_MEMORY_REQUEST_OR_WRITE_CPPI_RAM_lemma",
  ``!nic.
    RX_STATE_WRITE_CPPI_RAM_POST_PROCESS nic
    ==>
    RX_STATE_FETCH_NEXT_BD_OR_ISSUE_MEMORY_REQUEST_OR_WRITE_CPPI_RAM nic``,
  GEN_TAC THEN
  REWRITE_TAC RX_STATE_CLASSIFICATION_defs THEN
  DISCH_TAC THEN
  ASM_REWRITE_TAC [GSYM boolTheory.DISJ_ASSOC]);




val RX_STATE_write_sop_buffer_offset_IMP_RX_STATE_WRITE_SOP_AND_NOT_WRITE_RX_SOP_BD_PA_lemma = store_thm (
  "RX_STATE_write_sop_buffer_offset_IMP_RX_STATE_WRITE_SOP_AND_NOT_WRITE_RX_SOP_BD_PA_lemma",
  ``!nic.
    (nic.rx.state = rx_write_sop_buffer_offset)
    ==>
    RX_STATE_WRITE_SOP_AND_NOT_WRITE_RX_SOP_BD_PA nic``,
  GEN_TAC THEN
  DISCH_TAC THEN
  REWRITE_TAC [RX_STATE_WRITE_SOP_AND_NOT_WRITE_RX_SOP_BD_PA_def] THEN
  ASM_REWRITE_TAC [RX_STATE_WRITE_SOP_BUFFER_OFFSET_def]);

val RX_STATE_write_sop_buffer_offset_IMP_RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM_lemma = store_thm (
  "RX_STATE_write_sop_buffer_offset_IMP_RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM_lemma",
  ``!nic.
    (nic.rx.state = rx_write_sop_buffer_offset)
    ==>
    RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM nic``,
  GEN_TAC THEN
  DISCH_TAC THEN
  REWRITE_TAC RX_STATE_CLASSIFICATION_defs THEN
  ASM_REWRITE_TAC [RX_STATE_WRITE_SOP_BUFFER_OFFSET_def]);

val RX_STATE_WRITE_SOP_BUFFER_OFFSET_IMP_RX_STATE_WRITE_SOP_AND_NOT_WRITE_RX_SOP_BD_PA_lemma = store_thm (
  "RX_STATE_WRITE_SOP_BUFFER_OFFSET_IMP_RX_STATE_WRITE_SOP_AND_NOT_WRITE_RX_SOP_BD_PA_lemma",
  ``!nic.
    RX_STATE_WRITE_SOP_BUFFER_OFFSET nic
    ==>
    RX_STATE_WRITE_SOP_AND_NOT_WRITE_RX_SOP_BD_PA nic``,
  GEN_TAC THEN
  DISCH_TAC THEN
  ASM_REWRITE_TAC [RX_STATE_WRITE_SOP_AND_NOT_WRITE_RX_SOP_BD_PA_def, RX_STATE_WRITE_SOP_BUFFER_OFFSET_def]);

val RX_STATE_WRITE_SOP_BUFFER_OFFSET_IMP_RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM_lemma = store_thm (
  "RX_STATE_WRITE_SOP_BUFFER_OFFSET_IMP_RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM_lemma",
  ``!nic.
    RX_STATE_WRITE_SOP_BUFFER_OFFSET nic
    ==>
    RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM nic``,
  GEN_TAC THEN
  DISCH_TAC THEN
  REWRITE_TAC RX_STATE_CLASSIFICATION_defs THEN
  ASM_REWRITE_TAC []);






val RX_STATE_write_sop_buffer_length_IMP_RX_STATE_WRITE_SOP_AND_NOT_WRITE_RX_SOP_BD_PA_lemma = store_thm (
  "RX_STATE_write_sop_buffer_length_IMP_RX_STATE_WRITE_SOP_AND_NOT_WRITE_RX_SOP_BD_PA_lemma",
  ``!nic.
    (nic.rx.state = rx_write_sop_buffer_length)
    ==>
    RX_STATE_WRITE_SOP_AND_NOT_WRITE_RX_SOP_BD_PA nic``,
  GEN_TAC THEN
  DISCH_TAC THEN
  REWRITE_TAC [RX_STATE_WRITE_SOP_AND_NOT_WRITE_RX_SOP_BD_PA_def] THEN
  REWRITE_TAC [RX_STATE_WRITE_SOP_BUFFER_LENGTH_def] THEN
  ASM_REWRITE_TAC []);

val RX_STATE_write_sop_buffer_length_IMP_RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM_lemma = store_thm (
  "RX_STATE_write_sop_buffer_length_IMP_RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM_lemma",
  ``!nic.
    (nic.rx.state = rx_write_sop_buffer_length)
    ==>
    RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM nic``,
  GEN_TAC THEN
  DISCH_TAC THEN
  REWRITE_TAC RX_STATE_CLASSIFICATION_defs THEN
  REWRITE_TAC [RX_STATE_WRITE_SOP_BUFFER_LENGTH_def] THEN
  ASM_REWRITE_TAC []);

val RX_STATE_WRITE_SOP_BUFFER_LENGTH_IMP_RX_STATE_WRITE_SOP_AND_NOT_WRITE_RX_SOP_BD_PA_lemma = store_thm (
  "RX_STATE_WRITE_SOP_BUFFER_LENGTH_IMP_RX_STATE_WRITE_SOP_AND_NOT_WRITE_RX_SOP_BD_PA_lemma",
  ``!nic.
    RX_STATE_WRITE_SOP_BUFFER_LENGTH nic
    ==>
    RX_STATE_WRITE_SOP_AND_NOT_WRITE_RX_SOP_BD_PA nic``,
  GEN_TAC THEN
  DISCH_TAC THEN
  ASM_REWRITE_TAC [RX_STATE_WRITE_SOP_AND_NOT_WRITE_RX_SOP_BD_PA_def, RX_STATE_WRITE_SOP_BUFFER_LENGTH_def]);

val RX_STATE_WRITE_SOP_BUFFER_LENGTH_IMP_RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM_lemma = store_thm (
  "RX_STATE_WRITE_SOP_BUFFER_LENGTH_IMP_RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM_lemma",
  ``!nic.
    RX_STATE_WRITE_SOP_BUFFER_LENGTH nic
    ==>
    RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM nic``,
  GEN_TAC THEN
  DISCH_TAC THEN
  REWRITE_TAC RX_STATE_CLASSIFICATION_defs THEN
  ASM_REWRITE_TAC []);






val RX_STATE_set_sop_sop_IMP_RX_STATE_WRITE_SOP_AND_NOT_WRITE_RX_SOP_BD_PA_lemma = store_thm (
  "RX_STATE_set_sop_sop_IMP_RX_STATE_WRITE_SOP_AND_NOT_WRITE_RX_SOP_BD_PA_lemma",
  ``!nic.
    (nic.rx.state = rx_set_sop_sop)
    ==>
    RX_STATE_WRITE_SOP_AND_NOT_WRITE_RX_SOP_BD_PA nic``,
  GEN_TAC THEN
  DISCH_TAC THEN
  REWRITE_TAC [RX_STATE_WRITE_SOP_AND_NOT_WRITE_RX_SOP_BD_PA_def] THEN
  REWRITE_TAC [RX_STATE_SET_SOP_SOP_def] THEN
  ASM_REWRITE_TAC []);

val RX_STATE_set_sop_sop_IMP_RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM_lemma = store_thm (
  "RX_STATE_set_sop_sop_IMP_RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM_lemma",
  ``!nic.
    (nic.rx.state = rx_set_sop_sop)
    ==>
    RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM nic``,
  GEN_TAC THEN
  DISCH_TAC THEN
  REWRITE_TAC RX_STATE_CLASSIFICATION_defs THEN
  REWRITE_TAC [RX_STATE_SET_SOP_SOP_def] THEN
  ASM_REWRITE_TAC []);

val RX_STATE_SET_SOP_SOP_IMP_RX_STATE_WRITE_SOP_AND_NOT_WRITE_RX_SOP_BD_PA_lemma = store_thm (
  "RX_STATE_SET_SOP_SOP_IMP_RX_STATE_WRITE_SOP_AND_NOT_WRITE_RX_SOP_BD_PA_lemma",
  ``!nic.
    RX_STATE_SET_SOP_SOP nic
    ==>
    RX_STATE_WRITE_SOP_AND_NOT_WRITE_RX_SOP_BD_PA nic``,
  GEN_TAC THEN
  DISCH_TAC THEN
  ASM_REWRITE_TAC [RX_STATE_WRITE_SOP_AND_NOT_WRITE_RX_SOP_BD_PA_def, RX_STATE_SET_SOP_SOP_def]);

val RX_STATE_SET_SOP_SOP_IMP_RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM_lemma = store_thm (
  "RX_STATE_SET_SOP_SOP_IMP_RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM_lemma",
  ``!nic.
    RX_STATE_SET_SOP_SOP nic
    ==>
    RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM nic``,
  GEN_TAC THEN
  DISCH_TAC THEN
  REWRITE_TAC RX_STATE_CLASSIFICATION_defs THEN
  ASM_REWRITE_TAC []);







val RX_STATE_write_sop_pass_crc_IMP_RX_STATE_WRITE_SOP_AND_NOT_WRITE_RX_SOP_BD_PA_lemma = store_thm (
  "RX_STATE_write_sop_pass_crc_IMP_RX_STATE_WRITE_SOP_AND_NOT_WRITE_RX_SOP_BD_PA_lemma",
  ``!nic.
    (nic.rx.state = rx_write_sop_pass_crc)
    ==>
    RX_STATE_WRITE_SOP_AND_NOT_WRITE_RX_SOP_BD_PA nic``,
  GEN_TAC THEN
  DISCH_TAC THEN
  REWRITE_TAC [RX_STATE_WRITE_SOP_AND_NOT_WRITE_RX_SOP_BD_PA_def] THEN
  ASM_REWRITE_TAC [RX_STATE_WRITE_SOP_PASS_CRC_def]);

val RX_STATE_write_sop_pass_crc_IMP_RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM_lemma = store_thm (
  "RX_STATE_write_sop_pass_crc_IMP_RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM_lemma",
  ``!nic.
    (nic.rx.state = rx_write_sop_pass_crc)
    ==>
    RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM nic``,
  GEN_TAC THEN
  DISCH_TAC THEN
  REWRITE_TAC RX_STATE_CLASSIFICATION_defs THEN
  ASM_REWRITE_TAC [RX_STATE_WRITE_SOP_PASS_CRC_def]);

val RX_STATE_WRITE_SOP_PASS_CRC_IMP_RX_STATE_WRITE_SOP_AND_NOT_WRITE_RX_SOP_BD_PA_lemma = store_thm (
  "RX_STATE_WRITE_SOP_PASS_CRC_IMP_RX_STATE_WRITE_SOP_AND_NOT_WRITE_RX_SOP_BD_PA_lemma",
  ``!nic.
    RX_STATE_WRITE_SOP_PASS_CRC nic
    ==>
    RX_STATE_WRITE_SOP_AND_NOT_WRITE_RX_SOP_BD_PA nic``,
  GEN_TAC THEN
  DISCH_TAC THEN
  ASM_REWRITE_TAC [RX_STATE_WRITE_SOP_AND_NOT_WRITE_RX_SOP_BD_PA_def, RX_STATE_WRITE_SOP_PASS_CRC_def]);

val RX_STATE_WRITE_SOP_PASS_CRC_IMP_RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM_lemma = store_thm (
  "RX_STATE_WRITE_SOP_PASS_CRC_IMP_RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM_lemma",
  ``!nic.
    RX_STATE_WRITE_SOP_PASS_CRC nic
    ==>
    RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM nic``,
  GEN_TAC THEN
  DISCH_TAC THEN
  REWRITE_TAC RX_STATE_CLASSIFICATION_defs THEN
  ASM_REWRITE_TAC []);






val RX_STATE_write_sop_long_IMP_RX_STATE_WRITE_SOP_AND_NOT_WRITE_RX_SOP_BD_PA_lemma = store_thm (
  "RX_STATE_write_sop_long_IMP_RX_STATE_WRITE_SOP_AND_NOT_WRITE_RX_SOP_BD_PA_lemma",
  ``!nic.
    (nic.rx.state = rx_write_sop_long)
    ==>
    RX_STATE_WRITE_SOP_AND_NOT_WRITE_RX_SOP_BD_PA nic``,
  GEN_TAC THEN
  DISCH_TAC THEN
  REWRITE_TAC [RX_STATE_WRITE_SOP_AND_NOT_WRITE_RX_SOP_BD_PA_def] THEN
  ASM_REWRITE_TAC [RX_STATE_WRITE_SOP_LONG_def]);

val RX_STATE_write_sop_long_IMP_RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM_lemma = store_thm (
  "RX_STATE_write_sop_long_IMP_RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM_lemma",
  ``!nic.
    (nic.rx.state = rx_write_sop_long)
    ==>
    RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM nic``,
  GEN_TAC THEN
  DISCH_TAC THEN
  REWRITE_TAC RX_STATE_CLASSIFICATION_defs THEN
  ASM_REWRITE_TAC [RX_STATE_WRITE_SOP_LONG_def]);

val RX_STATE_WRITE_SOP_LONG_IMP_RX_STATE_WRITE_SOP_AND_NOT_WRITE_RX_SOP_BD_PA_lemma = store_thm (
  "RX_STATE_WRITE_SOP_LONG_IMP_RX_STATE_WRITE_SOP_AND_NOT_WRITE_RX_SOP_BD_PA_lemma",
  ``!nic.
    RX_STATE_WRITE_SOP_LONG nic
    ==>
    RX_STATE_WRITE_SOP_AND_NOT_WRITE_RX_SOP_BD_PA nic``,
  GEN_TAC THEN
  DISCH_TAC THEN
  ASM_REWRITE_TAC [RX_STATE_WRITE_SOP_AND_NOT_WRITE_RX_SOP_BD_PA_def, RX_STATE_WRITE_SOP_LONG_def]);

val RX_STATE_WRITE_SOP_LONG_IMP_RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM_lemma = store_thm (
  "RX_STATE_WRITE_SOP_LONG_IMP_RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM_lemma",
  ``!nic.
    RX_STATE_WRITE_SOP_LONG nic
    ==>
    RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM nic``,
  GEN_TAC THEN
  DISCH_TAC THEN
  REWRITE_TAC RX_STATE_CLASSIFICATION_defs THEN
  ASM_REWRITE_TAC []);






val RX_STATE_write_sop_short_IMP_RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM_lemma = store_thm (
  "RX_STATE_write_sop_short_IMP_RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM_lemma",
  ``!nic.
    (nic.rx.state = rx_write_sop_short)
    ==>
    RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM nic``,
  GEN_TAC THEN
  DISCH_TAC THEN
  REWRITE_TAC RX_STATE_CLASSIFICATION_defs THEN
  ASM_REWRITE_TAC [RX_STATE_WRITE_SOP_SHORT_def]);

val RX_STATE_WRITE_SOP_SHORT_IMP_RX_STATE_WRITE_SOP_AND_NOT_WRITE_RX_SOP_BD_PA_lemma = store_thm (
  "RX_STATE_WRITE_SOP_SHORT_IMP_RX_STATE_WRITE_SOP_AND_NOT_WRITE_RX_SOP_BD_PA_lemma",
  ``!nic.
    RX_STATE_WRITE_SOP_SHORT nic
    ==>
    RX_STATE_WRITE_SOP_AND_NOT_WRITE_RX_SOP_BD_PA nic``,
  GEN_TAC THEN
  DISCH_TAC THEN
  ASM_REWRITE_TAC [RX_STATE_WRITE_SOP_AND_NOT_WRITE_RX_SOP_BD_PA_def, RX_STATE_WRITE_SOP_SHORT_def]);

val RX_STATE_WRITE_SOP_SHORT_IMP_RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM_lemma = store_thm (
  "RX_STATE_WRITE_SOP_SHORT_IMP_RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM_lemma",
  ``!nic.
    RX_STATE_WRITE_SOP_SHORT nic
    ==>
    RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM nic``,
  GEN_TAC THEN
  DISCH_TAC THEN
  REWRITE_TAC RX_STATE_CLASSIFICATION_defs THEN
  ASM_REWRITE_TAC []);






val RX_STATE_write_sop_mac_ctl_IMP_RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM_lemma = store_thm (
  "RX_STATE_write_sop_mac_ctl_IMP_RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM_lemma",
  ``!nic.
    (nic.rx.state = rx_write_sop_mac_ctl)
    ==>
    RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM nic``,
  GEN_TAC THEN
  DISCH_TAC THEN
  REWRITE_TAC RX_STATE_CLASSIFICATION_defs THEN
  ASM_REWRITE_TAC [RX_STATE_WRITE_SOP_MAC_CTL_def]);

val RX_STATE_WRITE_SOP_MAC_CTL_IMP_RX_STATE_WRITE_SOP_AND_NOT_WRITE_RX_SOP_BD_PA_lemma = store_thm (
  "RX_STATE_WRITE_SOP_MAC_CTL_IMP_RX_STATE_WRITE_SOP_AND_NOT_WRITE_RX_SOP_BD_PA_lemma",
  ``!nic.
    RX_STATE_WRITE_SOP_MAC_CTL nic
    ==>
    RX_STATE_WRITE_SOP_AND_NOT_WRITE_RX_SOP_BD_PA nic``,
  GEN_TAC THEN
  DISCH_TAC THEN
  ASM_REWRITE_TAC [RX_STATE_WRITE_SOP_AND_NOT_WRITE_RX_SOP_BD_PA_def, RX_STATE_WRITE_SOP_MAC_CTL_def]);

val RX_STATE_WRITE_SOP_MAC_CTL_IMP_RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM_lemma = store_thm (
  "RX_STATE_WRITE_SOP_MAC_CTL_IMP_RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM_lemma",
  ``!nic.
    RX_STATE_WRITE_SOP_MAC_CTL nic
    ==>
    RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM nic``,
  GEN_TAC THEN
  DISCH_TAC THEN
  REWRITE_TAC RX_STATE_CLASSIFICATION_defs THEN
  ASM_REWRITE_TAC []);







val RX_STATE_write_sop_packet_length_IMP_RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM_lemma = store_thm (
  "RX_STATE_write_sop_packet_length_IMP_RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM_lemma",
  ``!nic.
    (nic.rx.state = rx_write_sop_packet_length)
    ==>
    RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM nic``,
  GEN_TAC THEN
  DISCH_TAC THEN
  REWRITE_TAC RX_STATE_CLASSIFICATION_defs THEN
  ASM_REWRITE_TAC [RX_STATE_WRITE_SOP_PACKET_LENGTH_def]);

val RX_STATE_WRITE_SOP_PACKET_LENGTH_IMP_RX_STATE_WRITE_SOP_AND_NOT_WRITE_RX_SOP_BD_PA_lemma = store_thm (
  "RX_STATE_WRITE_SOP_PACKET_LENGTH_IMP_RX_STATE_WRITE_SOP_AND_NOT_WRITE_RX_SOP_BD_PA_lemma",
  ``!nic.
    RX_STATE_WRITE_SOP_PACKET_LENGTH nic
    ==>
    RX_STATE_WRITE_SOP_AND_NOT_WRITE_RX_SOP_BD_PA nic``,
  GEN_TAC THEN
  DISCH_TAC THEN
  ASM_REWRITE_TAC [RX_STATE_WRITE_SOP_AND_NOT_WRITE_RX_SOP_BD_PA_def, RX_STATE_WRITE_SOP_PACKET_LENGTH_def]);

val RX_STATE_WRITE_SOP_PACKET_LENGTH_IMP_RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM_lemma = store_thm (
  "RX_STATE_WRITE_SOP_PACKET_LENGTH_IMP_RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM_lemma",
  ``!nic.
    RX_STATE_WRITE_SOP_PACKET_LENGTH nic
    ==>
    RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM nic``,
  GEN_TAC THEN
  DISCH_TAC THEN
  REWRITE_TAC RX_STATE_CLASSIFICATION_defs THEN
  ASM_REWRITE_TAC []);






val RX_STATE_set_sop_eop_overrun_or_clear_sop_owner_and_hdp_IMP_RX_STATE_SET_SOP_EOP_OVERRUN_OR_CLEAR_SOP_OWNER_AND_HDP_lemma = store_thm (
  "RX_STATE_set_sop_eop_overrun_or_clear_sop_owner_and_hdp_IMP_RX_STATE_SET_SOP_EOP_OVERRUN_OR_CLEAR_SOP_OWNER_AND_HDP",
  ``!nic.
    (nic.rx.state = rx_set_sop_eop_overrun_or_clear_sop_owner_and_hdp)
    ==>
    RX_STATE_SET_SOP_EOP_OVERRUN_OR_CLEAR_SOP_OWNER_AND_HDP nic``,
  ASM_REWRITE_TAC [RX_STATE_SET_SOP_EOP_OVERRUN_OR_CLEAR_SOP_OWNER_AND_HDP_def]);

val RX_STATE_set_sop_eop_overrun_or_clear_sop_owner_and_hdp_IMP_RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM_lemma = store_thm (
  "RX_STATE_set_sop_eop_overrun_or_clear_sop_owner_and_hdp_IMP_RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM_lemma",
  ``!nic.
    (nic.rx.state = rx_set_sop_eop_overrun_or_clear_sop_owner_and_hdp)
    ==>
    RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM nic``,
  GEN_TAC THEN
  DISCH_TAC THEN
  REWRITE_TAC RX_STATE_CLASSIFICATION_defs THEN
  ASM_REWRITE_TAC [RX_STATE_SET_SOP_EOP_OVERRUN_OR_CLEAR_SOP_OWNER_AND_HDP_def]);

val RX_STATE_SET_SOP_EOP_OVERRUN_OR_CLEAR_SOP_OWNER_AND_HDP_IMP_RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM_lemma = store_thm (
  "RX_STATE_SET_SOP_EOP_OVERRUN_OR_CLEAR_SOP_OWNER_AND_HDP_IMP_RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM_lemma",
  ``!nic.
    RX_STATE_SET_SOP_EOP_OVERRUN_OR_CLEAR_SOP_OWNER_AND_HDP nic
    ==>
    RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM nic``,
  GEN_TAC THEN
  REWRITE_TAC [RX_STATE_SET_SOP_EOP_OVERRUN_OR_CLEAR_SOP_OWNER_AND_HDP_def] THEN
  REWRITE_TAC [RX_STATE_set_sop_eop_overrun_or_clear_sop_owner_and_hdp_IMP_RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM_lemma]);

val RX_STATE_set_sop_eop_overrun_or_clear_sop_owner_and_hdp_IMP_RX_STATE_WRITE_CPPI_RAM_POST_PROCESS_lemma = store_thm (
  "RX_STATE_set_sop_eop_overrun_or_clear_sop_owner_and_hdp_IMP_RX_STATE_WRITE_CPPI_RAM_POST_PROCESS_lemma",
  ``!nic.
    (nic.rx.state = rx_set_sop_eop_overrun_or_clear_sop_owner_and_hdp)
    ==>
    RX_STATE_WRITE_CPPI_RAM_POST_PROCESS nic``,
  GEN_TAC THEN
  DISCH_TAC THEN
  REWRITE_TAC RX_STATE_CLASSIFICATION_defs THEN
  ASM_REWRITE_TAC [RX_STATE_SET_SOP_EOP_OVERRUN_OR_CLEAR_SOP_OWNER_AND_HDP_def]);

val RX_STATE_SET_SOP_EOP_OVERRUN_OR_CLEAR_SOP_OWNER_AND_HDP_IMP_RX_STATE_WRITE_CPPI_RAM_POST_PROCESS_lemma = store_thm (
  "RX_STATE_SET_SOP_EOP_OVERRUN_OR_CLEAR_SOP_OWNER_AND_HDP_IMP_RX_STATE_WRITE_CPPI_RAM_POST_PROCESS_lemma",
  ``!nic.
    RX_STATE_SET_SOP_EOP_OVERRUN_OR_CLEAR_SOP_OWNER_AND_HDP nic
    ==>
    RX_STATE_WRITE_CPPI_RAM_POST_PROCESS nic``,
  GEN_TAC THEN
  REWRITE_TAC [RX_STATE_SET_SOP_EOP_OVERRUN_OR_CLEAR_SOP_OWNER_AND_HDP_def] THEN
  REWRITE_TAC [RX_STATE_set_sop_eop_overrun_or_clear_sop_owner_and_hdp_IMP_RX_STATE_WRITE_CPPI_RAM_POST_PROCESS_lemma]);

val RX_STATE_SET_SOP_EOP_OVERRUN_OR_CLEAR_SOP_OWNER_AND_HDP_IMP_RX_STATE_WRITE_SOP_EOP_AND_WRITE_RX_SOP_BD_PA_lemma = store_thm (
  "RX_STATE_SET_SOP_EOP_OVERRUN_OR_CLEAR_SOP_OWNER_AND_HDP_IMP_RX_STATE_WRITE_SOP_EOP_AND_WRITE_RX_SOP_BD_PA_lemma",
  ``!nic.
    RX_STATE_SET_SOP_EOP_OVERRUN_OR_CLEAR_SOP_OWNER_AND_HDP nic
    ==>
    RX_STATE_WRITE_SOP_EOP_AND_WRITE_RX_SOP_BD_PA nic``,
  GEN_TAC THEN
  DISCH_TAC THEN
  ASM_REWRITE_TAC [RX_STATE_WRITE_SOP_EOP_AND_WRITE_RX_SOP_BD_PA_def, RX_STATE_SET_SOP_EOP_OVERRUN_OR_CLEAR_SOP_OWNER_AND_HDP_def]);






val RX_STATE_CLEAR_SOP_OWNER_AND_HDP_IMP_RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM_lemma = store_thm (
  "RX_STATE_CLEAR_SOP_OWNER_AND_HDP_IMP_RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM_lemma",
  ``!nic.
    RX_STATE_CLEAR_SOP_OWNER_AND_HDP nic
    ==>
    RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM nic``,
  GEN_TAC THEN
  DISCH_TAC THEN
  REWRITE_TAC RX_STATE_CLASSIFICATION_defs THEN
  ASM_REWRITE_TAC [RX_STATE_WRITE_SOP_EOP_AND_WRITE_RX_SOP_BD_PA_def]);

val RX_STATE_WRITE_CP_IMP_NOT_RX_STATE_IDLE_lemma = store_thm (
  "RX_STATE_WRITE_CP_IMP_NOT_RX_STATE_IDLE_lemma",
  ``!nic.
    RX_STATE_WRITE_CP nic
    ==>
    ~RX_STATE_IDLE nic``,
  GEN_TAC THEN
  REWRITE_TAC [RX_STATE_WRITE_CP_def, RX_STATE_IDLE_def] THEN
  DISCH_TAC THEN
  ASM_REWRITE_TAC [GSYM stateTheory.num2rx_abstract_state_thm] THEN
  REWRITE_TAC [REWRITE_RULE [DECIDE ``19 <> 0 : num``, DECIDE ``19 < 20 : num``, DECIDE ``0 < 20 : num``] (SPECL [``19 : num``, ``0 : num``] stateTheory.num2rx_abstract_state_11)]);

val RX_STATE_WRITE_CP_IMP_NOT_RX_STATE_FETCH_NEXT_BD_lemma = store_thm (
  "RX_STATE_WRITE_CP_IMP_NOT_RX_STATE_FETCH_NEXT_BD_lemma",
  ``!nic.
    RX_STATE_WRITE_CP nic
    ==>
    ~RX_STATE_FETCH_NEXT_BD nic``,
  GEN_TAC THEN
  REWRITE_TAC [RX_STATE_WRITE_CP_def, RX_STATE_FETCH_NEXT_BD_def] THEN
  DISCH_TAC THEN
  ASM_REWRITE_TAC [GSYM stateTheory.num2rx_abstract_state_thm] THEN
  REWRITE_TAC [REWRITE_RULE [DECIDE ``19 <> 1 : num``, DECIDE ``19 < 20 : num``, DECIDE ``1 < 20 : num``] (SPECL [``19 : num``, ``1 : num``] stateTheory.num2rx_abstract_state_11)]);











val RX_STATE_RECEIVE_FRAME_DEP_lemma = store_thm (
  "RX_STATE_RECEIVE_FRAME_DEP_lemma",
  ``!nic nic'.
    RX_STATE_RECEIVE_FRAME nic /\
    (nic'.rx.state = nic.rx.state) /\
    (nic'.it.state = nic.it.state) /\
    (nic'.rx.sop_bd_pa = nic.rx.sop_bd_pa) /\
    (nic'.rd.state = nic.rd.state)
    ==>
    RX_STATE_RECEIVE_FRAME nic'``,
  REPEAT GEN_TAC THEN
  REWRITE_TAC [RX_STATE_RECEIVE_FRAME_def] THEN
  REWRITE_TAC [RX_STATE_IDLE_def, IT_STATE_INITIALIZED_def, RX_BD_QUEUE_EMPTY_def, rd_state_definitionsTheory.RD_STATE_IDLE_def] THEN
  DISCH_TAC THEN
  ASM_REWRITE_TAC []);

val RX_STATE_WRITE_CP_NOT_BD_QUEUE_EMPTY_DEP_lemma = store_thm (
  "RX_STATE_WRITE_CP_NOT_BD_QUEUE_EMPTY_DEP_lemma",
  ``!nic nic'.
    RX_STATE_WRITE_CP_NOT_BD_QUEUE_EMPTY nic /\
    (nic'.rx.state = nic.rx.state) /\
    (nic'.rx.sop_bd_pa = nic.rx.sop_bd_pa)
    ==>
    RX_STATE_WRITE_CP_NOT_BD_QUEUE_EMPTY nic'``,
  REPEAT GEN_TAC THEN
  REWRITE_TAC [RX_STATE_WRITE_CP_NOT_BD_QUEUE_EMPTY_def] THEN
  REWRITE_TAC [RX_STATE_WRITE_CP_def, RX_BD_QUEUE_EMPTY_def] THEN
  DISCH_TAC THEN
  ASM_REWRITE_TAC []);

val RX_STATES_INIT_NOT_BD_QUEUE_EMPTY_DEP_lemma = store_thm (
  "RX_STATES_INIT_NOT_BD_QUEUE_EMPTY_DEP_lemma",
  ``!nic nic'.
    (RX_STATE_RECEIVE_FRAME nic \/
     RX_STATE_FETCH_NEXT_BD_OR_ISSUE_MEMORY_REQUEST_OR_WRITE_CPPI_RAM nic \/
     RX_STATE_WRITE_CP_NOT_BD_QUEUE_EMPTY nic) /\
    (nic'.rx.state = nic.rx.state) /\
    (nic'.it.state = nic.it.state) /\
    (nic'.rx.sop_bd_pa = nic.rx.sop_bd_pa) /\
    (nic'.rd.state = nic.rd.state)
    ==>
    RX_STATE_RECEIVE_FRAME nic' \/
    RX_STATE_FETCH_NEXT_BD_OR_ISSUE_MEMORY_REQUEST_OR_WRITE_CPPI_RAM nic' \/
    RX_STATE_WRITE_CP_NOT_BD_QUEUE_EMPTY nic'``,
  REPEAT GEN_TAC THEN
  DISCH_TAC THEN
  SPLIT_ASM_TAC THEN
  ASM_CASES_TAC ``RX_STATE_RECEIVE_FRAME nic`` THENL
  [
   ASSUME_TAC (CONJ_ANT_TO_HYP (SPEC_ALL RX_STATE_RECEIVE_FRAME_DEP_lemma)) THEN
   ASM_REWRITE_TAC []
   ,
   ASM_RW_ASM_TAC ``~P`` ``P \/ Q``
  ] THEN
  ASM_CASES_TAC ``RX_STATE_FETCH_NEXT_BD_OR_ISSUE_MEMORY_REQUEST_OR_WRITE_CPPI_RAM nic`` THENL
  [
   ASSUME_TAC (CONJ_ANT_TO_HYP (SPEC_ALL RX_STATE_FETCH_NEXT_BD_OR_ISSUE_MEMORY_REQUEST_OR_WRITE_CPPI_RAM_DEP_lemma)) THEN
   ASM_REWRITE_TAC []
   ,
   ASM_RW_ASM_TAC ``~P`` ``P \/ Q``
  ] THEN
  ASSUME_TAC (CONJ_ANT_TO_HYP (SPEC_ALL RX_STATE_WRITE_CP_NOT_BD_QUEUE_EMPTY_DEP_lemma)) THEN
  ASM_REWRITE_TAC []);

val NOT_RX_STATE_AUTONOMOUS_TRANSITION_ENABLE_IMP_RX_STATE_IDLE_lemma = store_thm (
  "NOT_RX_STATE_AUTONOMOUS_TRANSITION_ENABLE_IMP_RX_STATE_IDLE_lemma",
  ``!nic.
    ~RX_STATE_AUTONOMOUS_TRANSITION_ENABLE nic
    ==>
    RX_STATE_IDLE nic``,
  GEN_TAC THEN
  REWRITE_TAC [RX_STATE_AUTONOMOUS_TRANSITION_ENABLE_CONJ_rws] THEN
  REWRITE_TAC [RX_STATE_IDLE_def] THEN
  REWRITE_TAC [boolTheory.DE_MORGAN_THM] THEN
  Cases_on `nic.rx.state` THEN
  DISCH_TAC THEN
  ASM_REWRITE_TAC []);

val NOT_RX_STATE_AUTONOMOUS_TRANSITION_ENABLE_IMP_NOT_IT_STATE_INITIALIZED_OR_RX_BD_QUEUE_EMPTY_OR_NOT_RD_STATE_IDLE_lemma = store_thm (
  "NOT_RX_STATE_AUTONOMOUS_TRANSITION_ENABLE_IMP_NOT_IT_STATE_INITIALIZED_OR_RX_BD_QUEUE_EMPTY_OR_NOT_RD_STATE_IDLE_lemma",
  ``!nic.
    ~RX_STATE_AUTONOMOUS_TRANSITION_ENABLE nic
    ==>
    ~IT_STATE_INITIALIZED nic \/ RX_BD_QUEUE_EMPTY nic \/ ~RD_STATE_IDLE nic``,
  GEN_TAC THEN
  REWRITE_TAC [RX_STATE_AUTONOMOUS_TRANSITION_ENABLE_CONJ_rws] THEN
  REWRITE_TAC [rd_state_definitionsTheory.RD_STATE_IDLE_def] THEN
  REWRITE_TAC [boolTheory.DE_MORGAN_THM] THEN
  Cases_on `nic.rx.state` THEN
  WEAKEN_TAC (fn _ => true) THEN1
  ((* First goal with the assumption rx_idle <> rx_idle*)
   REWRITE_TAC [] THEN
   DISCH_TAC THEN
   ONCE_REWRITE_TAC [boolTheory.DISJ_SYM] THEN
   ASM_REWRITE_TAC [GSYM boolTheory.DISJ_ASSOC]) THEN
  (*Remaning goals with the assumptions rx_<state_name> <> rx_idle *)
  DISCH_TAC THEN
  SPLIT_ASM_TAC THEN
  RW_ASM_TAC ``x = y`` (GSYM stateTheory.num2rx_abstract_state_thm) THEN
  PAT_ASSUM ``x = y`` (fn thm =>
    let val (lhs, rhs) = (dest_eq o concl) thm in
    let val left_num = (#2 o dest_comb) lhs in
    let val right_num = (#2 o dest_comb) rhs in
    let val left_lt_20_thm = DECIDE ``^left_num < 20`` in
    let val right_lt_20_thm = DECIDE ``^right_num < 20`` in
    let val imp = SPECL [left_num, right_num] stateTheory.num2rx_abstract_state_11 in
    let val succ = REWRITE_RULE [left_lt_20_thm, right_lt_20_thm] imp in
    let val neq = DECIDE ``~(^left_num = ^right_num)`` in
      ASSUME_TAC (REWRITE_RULE [succ] thm) THEN
      UNDISCH_TAC ``^left_num = ^right_num`` THEN
      REWRITE_TAC [neq]
    end end end end end end end end));

val NOT_RX_STATE_AUTONOMOUS_TRANSITION_ENABLE_IMP_RX_STATE_IDLE_AND_NOT_IT_STATE_INITIALIZED_OR_RX_BD_QUEUE_EMPTY_OR_NOT_RD_STATE_IDLE_lemma = store_thm (
  "NOT_RX_STATE_AUTONOMOUS_TRANSITION_ENABLE_IMP_RX_STATE_IDLE_AND_NOT_IT_STATE_INITIALIZED_OR_RX_BD_QUEUE_EMPTY_OR_NOT_RD_STATE_IDLE_lemma",
  ``!nic.
    ~RX_STATE_AUTONOMOUS_TRANSITION_ENABLE nic
    ==>
    RX_STATE_IDLE nic /\ (~IT_STATE_INITIALIZED nic \/ RX_BD_QUEUE_EMPTY nic \/ ~RD_STATE_IDLE nic)``,
  GEN_TAC THEN
  DISCH_TAC THEN
  ASSUME_TAC (UNDISCH (SPEC_ALL NOT_RX_STATE_AUTONOMOUS_TRANSITION_ENABLE_IMP_RX_STATE_IDLE_lemma)) THEN
  ASSUME_TAC (UNDISCH (SPEC_ALL NOT_RX_STATE_AUTONOMOUS_TRANSITION_ENABLE_IMP_NOT_IT_STATE_INITIALIZED_OR_RX_BD_QUEUE_EMPTY_OR_NOT_RD_STATE_IDLE_lemma)) THEN
  ASM_REWRITE_TAC []);

val RX_STATE_IDLE_NOT_IT_STATE_INITIALIZED_IMP_NOT_RX_STATE_AUTONOMOUS_TRANSITION_ENABLE_lemma = store_thm (
  "RX_STATE_IDLE_NOT_IT_STATE_INITIALIZED_IMP_NOT_RX_STATE_AUTONOMOUS_TRANSITION_ENABLE_lemma",
  ``!nic.
    RX_STATE_IDLE nic /\ ~IT_STATE_INITIALIZED nic
    ==>
    ~RX_STATE_AUTONOMOUS_TRANSITION_ENABLE nic``,
  GEN_TAC THEN
  REWRITE_TAC [RX_STATE_AUTONOMOUS_TRANSITION_ENABLE_CONJ_rws] THEN
  DISCH_TAC THEN
  REWRITE_TAC [boolTheory.DE_MORGAN_THM] THEN
  ASM_REWRITE_TAC []);

val RX_STATE_IDLE_RX_BD_QUEUE_EMPTY_IMP_NOT_RX_STATE_AUTONOMOUS_TRANSITION_ENABLE_lemma = store_thm (
  "RX_STATE_IDLE_RX_BD_QUEUE_EMPTY_IMP_NOT_RX_STATE_AUTONOMOUS_TRANSITION_ENABLE_lemma",
  ``!nic.
    RX_STATE_IDLE nic /\ RX_BD_QUEUE_EMPTY nic
    ==>
    ~RX_STATE_AUTONOMOUS_TRANSITION_ENABLE nic``,
  GEN_TAC THEN
  REWRITE_TAC [RX_STATE_AUTONOMOUS_TRANSITION_ENABLE_CONJ_rws] THEN
  DISCH_TAC THEN
  REWRITE_TAC [boolTheory.DE_MORGAN_THM] THEN
  ASM_REWRITE_TAC []);

val RX_STATE_IDLE_NOT_RD_STATE_IDLE_IMP_NOT_RX_STATE_AUTONOMOUS_TRANSITION_ENABLE_lemma = store_thm (
  "RX_STATE_IDLE_NOT_RD_STATE_IDLE_IMP_NOT_RX_STATE_AUTONOMOUS_TRANSITION_ENABLE_lemma",
  ``!nic.
    RX_STATE_IDLE nic /\ ~RD_STATE_IDLE nic
    ==>
    ~RX_STATE_AUTONOMOUS_TRANSITION_ENABLE nic``,
  GEN_TAC THEN
  REWRITE_TAC [RX_STATE_AUTONOMOUS_TRANSITION_ENABLE_CONJ_rws] THEN
  REWRITE_TAC [rd_state_definitionsTheory.RD_STATE_IDLE_def] THEN
  DISCH_TAC THEN
  REWRITE_TAC [boolTheory.DE_MORGAN_THM] THEN
  ASM_REWRITE_TAC []);

val RX_STATE_IDLE_NOT_IT_STATE_INITIALIZED_OR_RX_BD_QUEUE_EMPTY_OR_NOT_RD_STATE_IDLE_IMP_NOT_RX_STATE_AUTONOMOUS_TRANSITION_ENABLE_lemma = store_thm (
  "RX_STATE_IDLE_NOT_IT_STATE_INITIALIZED_OR_RX_BD_QUEUE_EMPTY_OR_NOT_RD_STATE_IDLE_IMP_NOT_RX_STATE_AUTONOMOUS_TRANSITION_ENABLE_lemma",
  ``!nic.
    RX_STATE_IDLE nic /\ (~IT_STATE_INITIALIZED nic \/ RX_BD_QUEUE_EMPTY nic \/ ~RD_STATE_IDLE nic)
    ==>
    ~RX_STATE_AUTONOMOUS_TRANSITION_ENABLE nic``,
  GEN_TAC THEN
  ASM_CASES_TAC ``~IT_STATE_INITIALIZED nic`` THENL
  [
   ASM_REWRITE_TAC [] THEN
   DISCH_TAC THEN
   ASSUME_TAC (CONJ_ANT_TO_HYP (SPEC_ALL RX_STATE_IDLE_NOT_IT_STATE_INITIALIZED_IMP_NOT_RX_STATE_AUTONOMOUS_TRANSITION_ENABLE_lemma)) THEN
   ASM_REWRITE_TAC []
   ,
   ASM_REWRITE_TAC [] THEN
   WEAKEN_TAC (fn _ => true)
  ] THEN
  ASM_CASES_TAC ``RX_BD_QUEUE_EMPTY nic`` THENL
  [
   DISCH_TAC THEN
   SPLIT_ASM_TAC THEN
   ASSUME_TAC (CONJ_ANT_TO_HYP (SPEC_ALL RX_STATE_IDLE_RX_BD_QUEUE_EMPTY_IMP_NOT_RX_STATE_AUTONOMOUS_TRANSITION_ENABLE_lemma)) THEN
   ASM_REWRITE_TAC []
   ,
   ASM_REWRITE_TAC [] THEN
   DISCH_TAC THEN
   SPLIT_ASM_TAC THEN
   ASSUME_TAC (CONJ_ANT_TO_HYP (SPEC_ALL RX_STATE_IDLE_NOT_RD_STATE_IDLE_IMP_NOT_RX_STATE_AUTONOMOUS_TRANSITION_ENABLE_lemma)) THEN
   ASM_REWRITE_TAC []
  ]);

val NOT_RX_STATE_AUTONOMOUS_TRANSITION_ENABLE_EQ_RX_STATE_IDLE_NOT_IT_STATE_INITIALIZED_OR_RX_BD_QUEUE_EMPTY_OR_NOT_RD_STATE_IDLE_lemma = store_thm (
  "NOT_RX_STATE_AUTONOMOUS_TRANSITION_ENABLE_EQ_RX_STATE_IDLE_NOT_IT_STATE_INITIALIZED_OR_RX_BD_QUEUE_EMPTY_OR_NOT_RD_STATE_IDLE_lemma",
  ``!nic.
    ~RX_STATE_AUTONOMOUS_TRANSITION_ENABLE nic = RX_STATE_IDLE nic /\ (~IT_STATE_INITIALIZED nic \/ RX_BD_QUEUE_EMPTY nic \/ ~RD_STATE_IDLE nic)``,
  GEN_TAC THEN
  EQ_TAC THENL
  [
   REWRITE_TAC [NOT_RX_STATE_AUTONOMOUS_TRANSITION_ENABLE_IMP_RX_STATE_IDLE_AND_NOT_IT_STATE_INITIALIZED_OR_RX_BD_QUEUE_EMPTY_OR_NOT_RD_STATE_IDLE_lemma]
   ,
   REWRITE_TAC [RX_STATE_IDLE_NOT_IT_STATE_INITIALIZED_OR_RX_BD_QUEUE_EMPTY_OR_NOT_RD_STATE_IDLE_IMP_NOT_RX_STATE_AUTONOMOUS_TRANSITION_ENABLE_lemma]
  ]);

val RX_STATE_FETCH_NEXT_BD_OR_ISSUE_MEMORY_REQUEST_OR_WRITE_CPPI_RAM_IMP_NOT_RX_STATE_IDLE_AND_NOT_RX_STATE_WRITE_CP_lemma = store_thm (
  "RX_STATE_FETCH_NEXT_BD_OR_ISSUE_MEMORY_REQUEST_OR_WRITE_CPPI_RAM_IMP_NOT_RX_STATE_IDLE_AND_NOT_RX_STATE_WRITE_CP_lemma",
  ``!nic.
    RX_STATE_FETCH_NEXT_BD_OR_ISSUE_MEMORY_REQUEST_OR_WRITE_CPPI_RAM nic
    ==>
    ~RX_STATE_IDLE nic /\ ~RX_STATE_WRITE_CP nic``,
  GEN_TAC THEN
  REWRITE_TAC RX_STATE_CLASSIFICATION_defs THEN
  REWRITE_TAC RX_STATE_defs THEN
  REWRITE_TAC [GSYM stateTheory.num2rx_abstract_state_thm] THEN
  DISCH_TAC THEN
  REPEAT (PAT_ASSUM ``P`` (fn thm => DISJ_CASES_THEN (fn thm => ASSUME_TAC thm) thm)) THEN
  ASM_REWRITE_TAC [] THEN
  (fn (asl, concl) =>
     let val current_state_index = (#2 o dest_comb o #2 o dest_comb o #1 o dest_comb o #2 o
                     dest_comb o #1 o dest_conj) concl
     in
     let fun rewrite_theorem_current_state_index i j = REWRITE_RULE [DECIDE ``^i < 20``, DECIDE ``^j < 20``] (SPECL [i, j] stateTheory.num2rx_abstract_state_11)
     in
     REWRITE_TAC [rewrite_theorem_current_state_index current_state_index ``0 : num``,
                  rewrite_theorem_current_state_index current_state_index ``19 : num``]
                 (asl, concl)
     end
     end) THEN
  DECIDE_TAC);
  
val RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM_IMP_NOT_IDLE_FETCH_NEXT_BD_NOR_WRITE_CP_lemma = store_thm (
  "RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM_IMP_NOT_IDLE_FETCH_NEXT_BD_NOR_WRITE_CP_lemma",
  ``!nic.
    RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM nic
    ==>
    ~RX_STATE_IDLE nic /\
    ~RX_STATE_FETCH_NEXT_BD nic /\
    ~RX_STATE_WRITE_CP nic``,
  GEN_TAC THEN
  REWRITE_TAC RX_STATE_CLASSIFICATION_defs THEN
  REWRITE_TAC RX_STATE_defs THEN
  REWRITE_TAC [GSYM stateTheory.num2rx_abstract_state_thm] THEN
  DISCH_TAC THEN
  REPEAT (PAT_ASSUM ``P`` (fn thm => DISJ_CASES_THEN (fn thm => ASSUME_TAC thm) thm)) THEN
  ASM_REWRITE_TAC [] THEN
  (fn (asl, concl) =>
     let val current_state_index = (#2 o dest_comb o #2 o dest_comb o #1 o dest_comb o #2 o
                     dest_comb o #1 o dest_conj) concl
     in
     let fun rewrite_theorem_current_state_index i j = REWRITE_RULE [DECIDE ``^i < 20``, DECIDE ``^j < 20``] (SPECL [i, j] stateTheory.num2rx_abstract_state_11)
     in
     REWRITE_TAC [rewrite_theorem_current_state_index current_state_index ``0 : num``,
                  rewrite_theorem_current_state_index current_state_index ``1 : num``,
                  rewrite_theorem_current_state_index current_state_index ``19 : num``]
                 (asl, concl)
     end
     end) THEN
  DECIDE_TAC);

val RX_STATE_FETCH_NEXT_BD_IMP_NOT_RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM_lemma = store_thm (
  "RX_STATE_FETCH_NEXT_BD_IMP_NOT_RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM_lemma",
  ``!nic.
    RX_STATE_FETCH_NEXT_BD nic
    ==>
    ~RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM nic``,
  GEN_TAC THEN
  DISCH_TAC THEN
  CCONTR_TAC THEN
  RW_ASM_TAC ``~~P`` boolTheory.NOT_CLAUSES THEN
  ASSUME_TAC (UNDISCH (SPEC_ALL RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM_IMP_NOT_IDLE_FETCH_NEXT_BD_NOR_WRITE_CP_lemma)) THEN
  ASM_RW_ASM_TAC ``RX_STATE_FETCH_NEXT_BD nic`` ``P /\ Q`` THEN
  ASM_REWRITE_TAC []);

val RX_STATE_WRITE_CP_IMP_NOT_RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM_lemma = store_thm (
  "RX_STATE_WRITE_CP_IMP_NOT_RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM_lemma",
  ``!nic.
    RX_STATE_WRITE_CP nic
    ==>
    ~RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM nic``,
  GEN_TAC THEN
  DISCH_TAC THEN
  CCONTR_TAC THEN
  RW_ASM_TAC ``~~P`` boolTheory.NOT_CLAUSES THEN
  ASSUME_TAC (UNDISCH (SPEC_ALL RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM_IMP_NOT_IDLE_FETCH_NEXT_BD_NOR_WRITE_CP_lemma)) THEN
  ASM_RW_ASM_TAC ``RX_STATE_WRITE_CP nic`` ``P /\ Q`` THEN
  ASM_REWRITE_TAC []);

val RX_STATE_IDLE_IMP_NOT_RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM_lemma = store_thm (
  "RX_STATE_IDLE_IMP_NOT_RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM_lemma",
  ``!nic.
    RX_STATE_IDLE nic
    ==>
    ~RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM nic``,
  GEN_TAC THEN
  DISCH_TAC THEN
  CCONTR_TAC THEN
  RW_ASM_TAC ``~~P`` boolTheory.NOT_CLAUSES THEN
  ASSUME_TAC (UNDISCH (SPEC_ALL RX_STATE_ISSUE_NEXT_MEMORY_WRITE_REQUEST_OR_WRITE_CPPI_RAM_IMP_NOT_IDLE_FETCH_NEXT_BD_NOR_WRITE_CP_lemma)) THEN
  ASM_RW_ASM_TAC ``RX_STATE_IDLE nic`` ``P /\ Q`` THEN
  ASM_REWRITE_TAC []);

val RX_STATE_RECEIVE_FRAME_IMP_RX_STATE_IDLE_lemma = store_thm (
  "RX_STATE_RECEIVE_FRAME_IMP_RX_STATE_IDLE_lemma",
  ``!nic.
    RX_STATE_RECEIVE_FRAME nic
    ==>
    RX_STATE_IDLE nic``,
  REWRITE_TAC [RX_STATE_RECEIVE_FRAME_def, boolTheory.AND1_THM]);

val RX_STATE_WRITE_CP_IMP_RX_STATE_AUTONOMOUS_TRANSITION_ENABLE_lemma = store_thm (
  "RX_STATE_WRITE_CP_IMP_RX_STATE_AUTONOMOUS_TRANSITION_ENABLE_lemma",
  ``!nic.
    RX_STATE_WRITE_CP nic
    ==>
    RX_STATE_AUTONOMOUS_TRANSITION_ENABLE nic``,
  GEN_TAC THEN
  DISCH_TAC THEN
  ASSUME_TAC (UNDISCH (SPEC_ALL RX_STATE_WRITE_CP_IMP_NOT_RX_STATE_IDLE_lemma)) THEN
  ASSUME_TAC (UNDISCH (REWRITE_RULE [] (CONTRAPOS (SPEC_ALL NOT_RX_STATE_AUTONOMOUS_TRANSITION_ENABLE_IMP_RX_STATE_IDLE_lemma)))) THEN
  ASM_REWRITE_TAC []);

val RX_STATE_RECEIVE_FRAME_IMP_NOT_RX_BD_QUEUE_EMPTY_lemma = store_thm (
  "RX_STATE_RECEIVE_FRAME_IMP_NOT_RX_BD_QUEUE_EMPTY_lemma",
  ``!nic.
    RX_STATE_RECEIVE_FRAME nic
    ==>
    ~RX_BD_QUEUE_EMPTY nic``,
  GEN_TAC THEN
  REWRITE_TAC [RX_STATE_RECEIVE_FRAME_def] THEN
  DISCH_TAC THEN
  ASM_REWRITE_TAC []);





val RX_EQ_IMP_RX_STATE_EQ_lemma = store_thm (
  "RX_EQ_IMP_RX_STATE_EQ_lemma",
  ``!nic nic'.
    (nic'.rx = nic.rx)
    ==>
    (nic'.rx.state = nic.rx.state)``,
  REPEAT GEN_TAC THEN
  DISCH_TAC THEN
  ASM_REWRITE_TAC []);

val RX_EQ_IMP_RX_SOP_BD_PA_EQ_lemma = store_thm (
  "RX_EQ_IMP_RX_SOP_BD_PA_EQ_lemma",
  ``!nic nic'.
    (nic'.rx = nic.rx)
    ==>
    (nic'.rx.sop_bd_pa = nic.rx.sop_bd_pa)``,
  REPEAT GEN_TAC THEN
  DISCH_TAC THEN
  ASM_REWRITE_TAC []);

val RX_EQ_IMP_RX_CURRENT_BD_PA_EQ_lemma = store_thm (
  "RX_EQ_IMP_RX_CURRENT_BD_PA_EQ_lemma",
  ``!nic nic'.
    (nic'.rx = nic.rx)
    ==>
    (nic'.rx.current_bd_pa = nic.rx.current_bd_pa)``,
  REPEAT GEN_TAC THEN
  DISCH_TAC THEN
  ASM_REWRITE_TAC []);

val RX_EQ_IMP_RX_EOP_BD_PA_EQ_lemma = store_thm (
  "RX_EQ_IMP_RX_EOP_BD_PA_EQ_lemma",
  ``!nic nic'.
    (nic'.rx = nic.rx)
    ==>
    (nic'.rx.eop_bd_pa = nic.rx.eop_bd_pa)``,
  REPEAT GEN_TAC THEN
  DISCH_TAC THEN
  ASM_REWRITE_TAC []);

val RX_EQ_IMP_RX_CURRENT_BD_NDP_EQ_lemma = store_thm (
  "RX_EQ_IMP_RX_CURRENT_BD_NDP_EQ_lemma",
  ``!nic nic'.
    (nic'.rx = nic.rx)
    ==>
    (nic'.rx.current_bd.ndp = nic.rx.current_bd.ndp)``,
  REPEAT GEN_TAC THEN
  DISCH_TAC THEN
  ASM_REWRITE_TAC []);

val _ = export_theory();

