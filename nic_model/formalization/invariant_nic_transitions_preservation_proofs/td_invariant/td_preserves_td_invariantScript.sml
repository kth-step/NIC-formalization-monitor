open HolKernel Parse boolLib bossLib;
open helperTactics;
open td_transition_invariant_lemmasTheory;
open tdInvariantTheory;

val _ = new_theory "td_preserves_td_invariant";

val TD_AUTONOMOUS_TRANSITION_PRESERVES_TD_INVARIANT_lemma = store_thm (
  "TD_AUTONOMOUS_TRANSITION_PRESERVES_TD_INVARIANT_lemma",
  ``!nic env nic' WRITABLE.
  TD_AUTONOMOUS_TRANSITION nic env nic' /\
  TD_INVARIANT nic /\
  RX_INVARIANT nic WRITABLE
  ==>
  TD_INVARIANT nic'``,
  REPEAT GEN_TAC THEN
  DISCH_TAC THEN
  SPLIT_ASM_TAC THEN
  REWRITE_TAC [TD_INVARIANT_def] THEN
  DISCH_TAC THEN
  SPLIT_ASM_TAC THEN
  ASSUME_TAC (CONJ_ANT_TO_HYP (SPEC_ALL TD_AUTONOMOUS_TRANSITION_REVERSE_PRESERVES_RX_STATE_AUTONOMOUS_TRANSITION_ENABLE_lemma)) THEN
  ASSUME_TAC (CONJ_ANT_TO_HYP (SPEC_ALL RX_STATE_AUTONOMOUS_TRANSITION_ENABLE_RX_INVARIANT_IMP_RX_BD_QUEUE_IN_CPPI_RAM_lemma)) THEN
  SPLIT_ASM_TAC THEN
  ASSUME_TAC (CONJ_ANT_TO_HYP (SPEC_ALL TD_AUTONOMOUS_TRANSITION_RX_BD_QUEUE_IN_CPPI_RAM_PRESERVES_TD_INVARIANT_lemma)) THEN
  RW_ASM_TAC ``TD_INVARIANT nic'`` TD_INVARIANT_def THEN
  PAT_ASSUM ``P ==> Q`` (fn thm => ASSUME_TAC (CONJ_ANT_TO_HYP thm)) THEN
  ASM_REWRITE_TAC []);

val _ = export_theory();

