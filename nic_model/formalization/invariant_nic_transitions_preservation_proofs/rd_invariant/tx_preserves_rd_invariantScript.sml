open HolKernel Parse boolLib bossLib;
open helperTactics;
open rdInvariantTheory;
open rx_state_definitionsTheory;
open rdTheory;
open bd_listTheory;
open tx_transition_lemmasTheory;
open tx_transition_preserves_other_automataTheory;
open tx_invariant_lemmasTheory;
open tx_transition_NOT_EXPANDS_TX_BD_QUEUETheory;
open rd_invariant_lemmasTheory;

val _ = new_theory "tx_preserves_rd_invariant";

val RX_PRESERVES_RD_STATE_WRITE_CPPI_RAM_lemma = store_thm (
  "RX_PRESERVES_RD_STATE_WRITE_CPPI_RAM_lemma",
  ``!nic nic'.
    (nic'.rx = nic.rx) /\
    RD_STATE_WRITE_CPPI_RAM nic
    ==>
    RD_STATE_WRITE_CPPI_RAM nic'``,
  REPEAT GEN_TAC THEN
  REWRITE_TAC [RD_STATE_WRITE_CPPI_RAM_def] THEN
  REWRITE_TAC [RX_STATE_IDLE_def] THEN
  REWRITE_TAC [RD_WRITE_CURRENT_BD_PA_def] THEN
  DISCH_TAC THEN
  ASM_REWRITE_TAC []);

val RX_TX_STATE_TX_BD_QUEUE_NOT_EXPANDED_PRESERVES_RD_INVARIANT_CURRENT_BD_PA_lemma = store_thm (
  "RX_TX_STATE_TX_BD_QUEUE_NOT_EXPANDED_PRESERVES_RD_INVARIANT_CURRENT_BD_PA_lemma",
  ``!nic nic'.
    RD_INVARIANT nic /\
    TX_STATE_AUTONOMOUS_TRANSITION_ENABLE_OR_PROCESS_MEMORY_READ_REPLY nic /\
    (nic'.rx = nic.rx) /\
    IN_LIST1_IMP_IN_LIST2 (tx_bd_queue nic') (tx_bd_queue nic)
    ==>
    RD_INVARIANT_CURRENT_BD_PA nic'``,
  REPEAT GEN_TAC THEN
  REWRITE_TAC [RD_INVARIANT_def] THEN
  REWRITE_TAC [RD_INVARIANT_CURRENT_BD_PA_def] THEN
  DISCH_TAC THEN
  DISCH_TAC THEN
  SPLIT_ASM_TAC THEN
  ASSUME_TAC (CONJ_ANT_TO_HYP (GSYM (SPECL [``nic' : nic_state``, ``nic : nic_state``] RX_PRESERVES_RD_STATE_WRITE_CPPI_RAM_lemma))) THEN
  PAT_ASSUM ``P ==> Q`` (fn thm => ASSUME_TAC (CONJ_ANT_TO_HYP thm)) THEN
  SPLIT_ASM_TAC THEN
  ASSUME_TAC (CONJ_ANT_TO_HYP (SPECL [``nic.rx.current_bd_pa``, ``tx_bd_queue nic'``, ``tx_bd_queue nic``] BD_NOT_OVERLAP_BDs_IMP_BD_NOT_OVERLAP_SUBLIST_lemma)) THEN
  ASM_REWRITE_TAC []);

val TX_AUTONOMOUS_TRANSITION_PRESERVES_RD_INVARIANT_CURRENT_BD_PA_lemma = store_thm (
  "TX_AUTONOMOUS_TRANSITION_PRESERVES_RD_INVARIANT_CURRENT_BD_PA_lemma",
  ``!nic env nic' mr' READABLE.
    TX_AUTONOMOUS_TRANSITION nic env nic' mr' /\
    TX_INVARIANT nic READABLE /\
    RD_INVARIANT nic
    ==>
    RD_INVARIANT_CURRENT_BD_PA nic'``,
  REPEAT GEN_TAC THEN
  DISCH_TAC THEN
  SPLIT_ASM_TAC THEN
  ASSUME_TAC (UNDISCH (SPEC_ALL TX_AUTONOMOUS_TRANSITION_IMP_TX_TRANSITION_lemma)) THEN
  ASSUME_TAC (CONJ_ANT_TO_HYP (SPEC_ALL tx_transition_PRESERVES_OTHER_AUTOMATA_lemma)) THEN
  SPLIT_ASM_TAC THEN
  ASSUME_TAC (UNDISCH (SPEC_ALL TX_AUTONOMOUS_TRANSITION_IMP_TX_STATE_AUTONOMOUS_TRANSITION_ENABLE_OR_PROCESS_MEMORY_READ_REPLY_lemma)) THEN
  ASSUME_TAC (UNDISCH (SPEC_ALL TX_AUTONOMOUS_TRANSITION_IMP_TX_STATE_AUTONOMOUS_TRANSITION_ENABLE_lemma)) THEN
  ASSUME_TAC (CONJ_ANT_TO_HYP (SPEC_ALL TX_INVARIANT_IMP_TX_INVARIANT_WELL_DEFINED_lemma)) THEN
  ASSUME_TAC (CONJ_ANT_TO_HYP (SPEC_ALL tx_transition_NOT_EXPANDS_TX_BD_QUEUE_lemma)) THEN
  ASSUME_TAC (CONJ_ANT_TO_HYP (SPEC_ALL RX_TX_STATE_TX_BD_QUEUE_NOT_EXPANDED_PRESERVES_RD_INVARIANT_CURRENT_BD_PA_lemma)) THEN
  ASM_REWRITE_TAC []);

val TX_AUTONOMOUS_TRANSITION_PRESERVES_RD_INVARIANT_RD_CLEARS_BD_QUEUE_lemma = store_thm (
  "TX_AUTONOMOUS_TRANSITION_PRESERVES_RD_INVARIANT_RD_CLEARS_BD_QUEUE_lemma",
  ``!nic env nic' mr' READABLE.
    TX_AUTONOMOUS_TRANSITION nic env nic' mr' /\
    TX_INVARIANT nic READABLE /\
    RD_INVARIANT nic
    ==>
    RD_INVARIANT_RD_CLEARS_BD_QUEUE nic'``,
  REPEAT GEN_TAC THEN
  REWRITE_TAC [RD_INVARIANT_def] THEN
  DISCH_TAC THEN
  SPLIT_ASM_TAC THEN
  MATCH_MP_TAC EQ_RD_STATE_EQ_RX_SOP_BD_PA_PRESERVES_RD_INVARIANT_RD_CLEARS_BD_QUEUE_lemma THEN
  EXISTS_TAC ``nic : nic_state`` THEN
  ASSUME_TAC (UNDISCH (SPEC_ALL TX_AUTONOMOUS_TRANSITION_IMP_TX_TRANSITION_lemma)) THEN
  ASSUME_TAC (CONJ_ANT_TO_HYP (SPEC_ALL tx_transition_PRESERVES_OTHER_AUTOMATA_lemma)) THEN
  ASM_REWRITE_TAC []);

val TX_AUTONOMOUS_TRANSITION_PRESERVES_RD_INVARIANT_RX_ADVANCES_BD_QUEUE_lemma = store_thm (
  "TX_AUTONOMOUS_TRANSITION_PRESERVES_RD_INVARIANT_RX_ADVANCES_BD_QUEUE_lemma",
  ``!nic env nic' mr' READABLE.
    TX_AUTONOMOUS_TRANSITION nic env nic' mr' /\
    TX_INVARIANT nic READABLE /\
    RD_INVARIANT nic
    ==>
    RD_INVARIANT_RX_ADVANCES_BD_QUEUE nic'``,
  REPEAT GEN_TAC THEN
  REWRITE_TAC [RD_INVARIANT_def] THEN
  DISCH_TAC THEN
  SPLIT_ASM_TAC THEN
  MATCH_MP_TAC EQ_RX_STATE_EQ_RX_SOP_BD_PA_EQ_RD_STATE_EQ_IT_STATE_PRESERVES_RD_INVARIANT_RX_ADVANCES_BD_QUEUE_lemma THEN
  EXISTS_TAC ``nic : nic_state`` THEN
  ASSUME_TAC (UNDISCH (SPEC_ALL TX_AUTONOMOUS_TRANSITION_IMP_TX_TRANSITION_lemma)) THEN
  ASSUME_TAC (CONJ_ANT_TO_HYP (SPEC_ALL tx_transition_PRESERVES_OTHER_AUTOMATA_lemma)) THEN
  ASM_REWRITE_TAC []);

val TX_AUTONOMOUS_TRANSITION_PRESERVES_RD_INVARIANT_lemma = store_thm (
  "TX_AUTONOMOUS_TRANSITION_PRESERVES_RD_INVARIANT_lemma",
  ``!nic env nic' mr' READABLE.
    TX_AUTONOMOUS_TRANSITION nic env nic' mr' /\
    TX_INVARIANT nic READABLE /\
    RD_INVARIANT nic
    ==>
    RD_INVARIANT nic'``,
  REPEAT GEN_TAC THEN
  DISCH_TAC THEN
  SPLIT_ASM_TAC THEN
  REWRITE_TAC [RD_INVARIANT_def] THEN
  ASSUME_TAC (CONJ_ANT_TO_HYP (SPEC_ALL TX_AUTONOMOUS_TRANSITION_PRESERVES_RD_INVARIANT_CURRENT_BD_PA_lemma)) THEN
  ASSUME_TAC (CONJ_ANT_TO_HYP (SPEC_ALL TX_AUTONOMOUS_TRANSITION_PRESERVES_RD_INVARIANT_RD_CLEARS_BD_QUEUE_lemma)) THEN
  ASSUME_TAC (CONJ_ANT_TO_HYP (SPEC_ALL TX_AUTONOMOUS_TRANSITION_PRESERVES_RD_INVARIANT_RX_ADVANCES_BD_QUEUE_lemma)) THEN
  ASM_REWRITE_TAC []);



val TX_PROCESS_MEMORY_READ_REPLY_TRANSITION_PRESERVES_RD_INVARIANT_CURRENT_BD_PA_lemma = store_thm (
  "TX_PROCESS_MEMORY_READ_REPLY_TRANSITION_PRESERVES_RD_INVARIANT_CURRENT_BD_PA_lemma",
  ``!nic mr nic' READABLE.
    TX_PROCESS_MEMORY_READ_REPLY_TRANSITION nic mr nic' /\
    TX_INVARIANT nic READABLE /\
    RD_INVARIANT nic
    ==>
    RD_INVARIANT_CURRENT_BD_PA nic'``,
  REPEAT GEN_TAC THEN
  DISCH_TAC THEN
  SPLIT_ASM_TAC THEN
  ASSUME_TAC (UNDISCH (SPEC_ALL TX_PROCESS_MEMORY_READ_REPLY_TRANSITION_IMP_TX_3PROCESS_MEMORY_READ_REPLY_lemma)) THEN
  ASSUME_TAC (CONJ_ANT_TO_HYP (SPEC_ALL tx_memory_read_reply_PRESERVES_OTHER_AUTOMATA_lemma)) THEN
  SPLIT_ASM_TAC THEN
  ASSUME_TAC (UNDISCH (SPEC_ALL TX_PROCESS_MEMORY_READ_REPLY_TRANSITION_IMP_TX_STATE_PROCESS_MEMORY_READ_REPLY_lemma)) THEN
  ASSUME_TAC (UNDISCH (SPEC_ALL TX_PROCESS_MEMORY_READ_REPLY_TRANSITION_IMP_TX_STATE_AUTONOMOUS_TRANSITION_ENABLE_OR_PROCESS_MEMORY_READ_REPLY_lemma)) THEN
  ASSUME_TAC (CONJ_ANT_TO_HYP (SPEC_ALL TX_INVARIANT_IMP_TX_INVARIANT_WELL_DEFINED_lemma)) THEN
  ASSUME_TAC (CONJ_ANT_TO_HYP (SPEC_ALL tx_memory_read_reply_NOT_EXPANDS_TX_BD_QUEUE_lemma)) THEN
  ASSUME_TAC (CONJ_ANT_TO_HYP (SPEC_ALL RX_TX_STATE_TX_BD_QUEUE_NOT_EXPANDED_PRESERVES_RD_INVARIANT_CURRENT_BD_PA_lemma)) THEN
  ASM_REWRITE_TAC []);

val TX_PROCESS_MEMORY_READ_REPLY_TRANSITION_PRESERVES_RD_INVARIANT_RD_CLEARS_BD_QUEUE_lemma = store_thm (
  "TX_PROCESS_MEMORY_READ_REPLY_TRANSITION_PRESERVES_RD_INVARIANT_RD_CLEARS_BD_QUEUE_lemma",
  ``!nic mr nic' READABLE.
    TX_PROCESS_MEMORY_READ_REPLY_TRANSITION nic mr nic' /\
    TX_INVARIANT nic READABLE /\
    RD_INVARIANT nic
    ==>
    RD_INVARIANT_RD_CLEARS_BD_QUEUE nic'``,
  REPEAT GEN_TAC THEN
  REWRITE_TAC [RD_INVARIANT_def] THEN
  DISCH_TAC THEN
  SPLIT_ASM_TAC THEN
  MATCH_MP_TAC EQ_RD_STATE_EQ_RX_SOP_BD_PA_PRESERVES_RD_INVARIANT_RD_CLEARS_BD_QUEUE_lemma THEN
  EXISTS_TAC ``nic : nic_state`` THEN
  ASSUME_TAC (UNDISCH (SPEC_ALL TX_PROCESS_MEMORY_READ_REPLY_TRANSITION_IMP_TX_3PROCESS_MEMORY_READ_REPLY_lemma)) THEN
  ASSUME_TAC (CONJ_ANT_TO_HYP (SPEC_ALL tx_memory_read_reply_PRESERVES_OTHER_AUTOMATA_lemma)) THEN
  ASM_REWRITE_TAC []);

val TX_PROCESS_MEMORY_READ_REPLY_TRANSITION_PRESERVES_RD_INVARIANT_RX_ADVANCES_BD_QUEUE_lemma = store_thm (
  "TX_PROCESS_MEMORY_READ_REPLY_TRANSITION_PRESERVES_RD_INVARIANT_RX_ADVANCES_BD_QUEUE_lemma",
  ``!nic mr nic' READABLE.
    TX_PROCESS_MEMORY_READ_REPLY_TRANSITION nic mr nic' /\
    TX_INVARIANT nic READABLE /\
    RD_INVARIANT nic
    ==>
    RD_INVARIANT_RX_ADVANCES_BD_QUEUE nic'``,
  REPEAT GEN_TAC THEN
  REWRITE_TAC [RD_INVARIANT_def] THEN
  DISCH_TAC THEN
  SPLIT_ASM_TAC THEN
  MATCH_MP_TAC EQ_RX_STATE_EQ_RX_SOP_BD_PA_EQ_RD_STATE_EQ_IT_STATE_PRESERVES_RD_INVARIANT_RX_ADVANCES_BD_QUEUE_lemma THEN
  EXISTS_TAC ``nic : nic_state`` THEN
  ASSUME_TAC (UNDISCH (SPEC_ALL TX_PROCESS_MEMORY_READ_REPLY_TRANSITION_IMP_TX_3PROCESS_MEMORY_READ_REPLY_lemma)) THEN
  ASSUME_TAC (CONJ_ANT_TO_HYP (SPEC_ALL tx_memory_read_reply_PRESERVES_OTHER_AUTOMATA_lemma)) THEN
  ASM_REWRITE_TAC []);

val TX_PROCESS_MEMORY_READ_REPLY_TRANSITION_PRESERVES_RD_INVARIANT_lemma = store_thm (
  "TX_PROCESS_MEMORY_READ_REPLY_TRANSITION_PRESERVES_RD_INVARIANT_lemma",
  ``!nic mr nic' READABLE.
    TX_PROCESS_MEMORY_READ_REPLY_TRANSITION nic mr nic' /\
    TX_INVARIANT nic READABLE /\
    RD_INVARIANT nic
    ==>
    RD_INVARIANT nic'``,
  REPEAT GEN_TAC THEN
  DISCH_TAC THEN
  SPLIT_ASM_TAC THEN
  REWRITE_TAC [RD_INVARIANT_def] THEN
  ASSUME_TAC (CONJ_ANT_TO_HYP (SPEC_ALL TX_PROCESS_MEMORY_READ_REPLY_TRANSITION_PRESERVES_RD_INVARIANT_CURRENT_BD_PA_lemma)) THEN
  ASSUME_TAC (CONJ_ANT_TO_HYP (SPEC_ALL TX_PROCESS_MEMORY_READ_REPLY_TRANSITION_PRESERVES_RD_INVARIANT_RD_CLEARS_BD_QUEUE_lemma)) THEN
  ASSUME_TAC (CONJ_ANT_TO_HYP (SPEC_ALL TX_PROCESS_MEMORY_READ_REPLY_TRANSITION_PRESERVES_RD_INVARIANT_RX_ADVANCES_BD_QUEUE_lemma)) THEN
  ASM_REWRITE_TAC []);

val _ = export_theory();

