open HolKernel Parse boolLib bossLib;
open helperTactics;
open itInvariantTheory;
open it_transition_lemmasTheory;
open tx_state_definitionsTheory;
open rx_state_definitionsTheory;

val _ = new_theory "it_preserves_it_invariant";

val IT_AUTONOMOUS_TRANSITION_PRESERVES_IT_INVARIANT_NOT_INIT_IMP_TX_RX_IDLE_lemma = store_thm (
  "IT_AUTONOMOUS_TRANSITION_PRESERVES_IT_INVARIANT_NOT_INIT_IMP_TX_RX_IDLE_lemma",
  ``!nic nic'.
    IT_AUTONOMOUS_TRANSITION nic nic' /\
    IT_INVARIANT_NOT_INIT_IMP_TX_RX_IDLE nic
    ==>
    IT_INVARIANT_NOT_INIT_IMP_TX_RX_IDLE nic'``,
  REPEAT GEN_TAC THEN
  REWRITE_TAC [IT_INVARIANT_NOT_INIT_IMP_TX_RX_IDLE_def] THEN
  REWRITE_TAC [TX_STATE_IDLE_def, RX_STATE_IDLE_def] THEN
  REPEAT DISCH_TAC THEN
  SPLIT_ASM_TAC THEN
  ASSUME_TAC (UNDISCH (SPEC_ALL IT_AUTONOMOUS_TRANSITION_IMP_NOT_IT_STATE_INITIALIZED_lemma)) THEN
  PAT_ASSUM ``P ==> Q`` (fn thm => ASSUME_TAC (UNDISCH thm)) THEN
  SPLIT_ASM_TAC THEN
  ASSUME_TAC (UNDISCH (SPEC_ALL IT_AUTONOMOUS_TRANSITION_NON_MODIFICATION_lemma)) THEN
  ASM_REWRITE_TAC []);

val IT_AUTONOMOUS_TRANSITION_PRESERVES_IT_INVARIANT_RESET_IMP_NOT_RX_HDP_INIT_lemma = store_thm (
  "IT_AUTONOMOUS_TRANSITION_PRESERVES_IT_INVARIANT_RESET_IMP_NOT_RX_HDP_INIT_lemma",
  ``!nic nic'.
    IT_AUTONOMOUS_TRANSITION nic nic'
    ==>
    IT_INVARIANT_RESET_IMP_NOT_RX_HDP_INIT nic'``,
  REPEAT GEN_TAC THEN
  DISCH_TAC THEN
  REWRITE_TAC [IT_INVARIANT_RESET_IMP_NOT_RX_HDP_INIT_def] THEN
  ASSUME_TAC (UNDISCH (SPEC_ALL IT_AUTONOMOUS_TRANSITION_IMP_NOT_NEXT_IT_STATE_RESET_lemma)) THEN
  ASM_REWRITE_TAC []);

val IT_AUTONOMOUS_TRANSITION_PRESERVES_IT_INVARIANT_RX_HDP_INITIALIZED_IMP_RX_BD_QUEUE_EMPTY_lemma = store_thm (
  "IT_AUTONOMOUS_TRANSITION_PRESERVES_IT_INVARIANT_RX_HDP_INITIALIZED_IMP_RX_BD_QUEUE_EMPTY_lemma",
  ``!nic nic'.
    IT_AUTONOMOUS_TRANSITION nic nic' /\
    IT_INVARIANT_RESET_IMP_NOT_RX_HDP_INIT nic
    ==>
    IT_INVARIANT_RX_HDP_INITIALIZED_IMP_RX_BD_QUEUE_EMPTY nic'``,
  REPEAT GEN_TAC THEN
  REWRITE_TAC [IT_INVARIANT_RESET_IMP_NOT_RX_HDP_INIT_def] THEN
  REWRITE_TAC [IT_INVARIANT_RX_HDP_INITIALIZED_IMP_RX_BD_QUEUE_EMPTY_def] THEN
  DISCH_TAC THEN
  SPLIT_ASM_TAC THEN
  ASSUME_TAC (UNDISCH (SPEC_ALL IT_AUTONOMOUS_TRANSITION_IMP_IT_STATE_RESET_lemma)) THEN
  PAT_ASSUM ``P ==> Q`` (fn thm => ASSUME_TAC (UNDISCH thm)) THEN
  ASSUME_TAC (UNDISCH (SPEC_ALL IT_AUTONOMOUS_TRANSITION_NON_MODIFICATION_lemma)) THEN
  RW_ASM_TAC ``~RX0_HDP_INITIALIZED nic`` RX0_HDP_INITIALIZED_def THEN
  REWRITE_TAC [RX0_HDP_INITIALIZED_def] THEN
  ASM_REWRITE_TAC []);

val IT_AUTONOMOUS_TRANSITION_PRESERVES_IT_INVARIANT_lemma = store_thm (
  "IT_AUTONOMOUS_TRANSITION_PRESERVES_IT_INVARIANT_lemma",
  ``!nic nic'.
    IT_AUTONOMOUS_TRANSITION nic nic' /\
    IT_INVARIANT nic
    ==>
    IT_INVARIANT nic'``,
  REPEAT GEN_TAC THEN
  REWRITE_TAC [IT_INVARIANT_def] THEN
  DISCH_TAC THEN
  SPLIT_ASM_TAC THEN
  ASSUME_TAC (CONJ_ANT_TO_HYP (SPEC_ALL IT_AUTONOMOUS_TRANSITION_PRESERVES_IT_INVARIANT_NOT_INIT_IMP_TX_RX_IDLE_lemma)) THEN
  ASSUME_TAC (UNDISCH (SPEC_ALL IT_AUTONOMOUS_TRANSITION_PRESERVES_IT_INVARIANT_RESET_IMP_NOT_RX_HDP_INIT_lemma)) THEN
  ASSUME_TAC (CONJ_ANT_TO_HYP (SPEC_ALL IT_AUTONOMOUS_TRANSITION_PRESERVES_IT_INVARIANT_RX_HDP_INITIALIZED_IMP_RX_BD_QUEUE_EMPTY_lemma)) THEN
  ASM_REWRITE_TAC []);

val _ = export_theory();

